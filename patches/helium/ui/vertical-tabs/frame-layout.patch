--- a/chrome/browser/ui/layout_constants.cc
+++ b/chrome/browser/ui/layout_constants.cc
@@ -21,6 +21,7 @@
 
 int GetLayoutConstant(LayoutConstant constant) {
   const bool touch_ui = ui::TouchUiController::Get()->touch_ui();
+  const bool vertical_tabs = tabs::AreHeliumVerticalTabsEnabled();
   switch (constant) {
     case TOP_BAR_VERTICAL_PADDING:
       return 3;
@@ -94,13 +95,21 @@ int GetLayoutConstant(LayoutConstant con
       return touch_ui ? 12 : 16;
     case TAB_CLOSE_BUTTON_SIZE:
       return touch_ui ? 24 : 16;
-    case TAB_HEIGHT:
-      return 31;
-    case TAB_STRIP_HEIGHT:
-      return GetLayoutConstant(TAB_HEIGHT) +
-             GetLayoutConstant(TAB_STRIP_PADDING);
+    case TAB_HEIGHT: {
+      const int base_height = 28;
+      return !vertical_tabs ?
+            base_height + GetLayoutConstant(TOP_BAR_VERTICAL_PADDING) :
+            base_height;
+    }
+    case TAB_STRIP_HEIGHT: {
+      int padding = GetLayoutConstant(TOP_BAR_VERTICAL_PADDING);
+      if (vertical_tabs) {
+        padding = padding * 2;
+      }
+      return GetLayoutConstant(TAB_HEIGHT) + padding;
+    }
     case TAB_STRIP_PADDING:
-      return GetLayoutConstant(TOP_BAR_VERTICAL_PADDING);
+      return vertical_tabs ? 0 : GetLayoutConstant(TOP_BAR_VERTICAL_PADDING);
     case TAB_SEPARATOR_HEIGHT:
       return touch_ui ? 24 : 20;
     case TAB_PRE_TITLE_PADDING:
@@ -186,6 +195,11 @@ gfx::Insets GetLayoutInsets(LayoutInset
     case TOOLBAR_INTERIOR_MARGIN: {
       const int vert = GetLayoutConstant(TOP_BAR_VERTICAL_PADDING);
       const int horiz = vert * 2;
+
+      if (tabs::AreHeliumVerticalTabsEnabled()) {
+        return gfx::Insets::VH(vert, horiz + vert);
+      }
+
       return touch_ui ? gfx::Insets() :
           gfx::Insets::TLBR(0, horiz, vert, horiz);
     }
--- a/chrome/browser/ui/views/frame/browser_frame_mac.mm
+++ b/chrome/browser/ui/views/frame/browser_frame_mac.mm
@@ -15,6 +15,8 @@
 #include "chrome/browser/ui/browser_command_controller.h"
 #include "chrome/browser/ui/browser_commands.h"
 #include "chrome/browser/ui/browser_window/public/browser_window_features.h"
+#include "chrome/browser/ui/tabs/features.h"
+#include "chrome/browser/ui/layout_constants.h"
 #import "chrome/browser/ui/cocoa/browser_window_command_handler.h"
 #import "chrome/browser/ui/cocoa/chrome_command_dispatcher_delegate.h"
 #import "chrome/browser/ui/cocoa/touchbar/browser_window_touch_bar_controller.h"
@@ -154,8 +156,14 @@ void BrowserFrameMac::GetWindowFrameTitl
   if (browser_view_ && browser_view_->frame() &&
       browser_view_->frame()->GetFrameView()) {
     *override_titlebar_height = true;
-    *titlebar_height =
-        browser_view_->GetTabStripHeight() +
+    float base_height;
+    if (tabs::AreHeliumVerticalTabsEnabled()) {
+      base_height = GetLayoutConstant(LOCATION_BAR_HEIGHT) +
+                    GetLayoutConstant(TOP_BAR_VERTICAL_PADDING) * 2;
+    } else {
+      base_height = browser_view_->GetTabStripHeight();
+    }
+    *titlebar_height = base_height +
         browser_view_->frame()->GetFrameView()->GetTopInset(true);
     if (!browser_view_->ShouldDrawTabStrip()) {
       *titlebar_height +=
--- a/chrome/browser/ui/views/frame/browser_root_view.cc
+++ b/chrome/browser/ui/views/frame/browser_root_view.cc
@@ -344,7 +344,7 @@ bool BrowserRootView::OnMouseWheel(const
   // Scroll-event-changes-tab is incompatible with scrolling tabstrip, so
   // disable it if the latter feature is enabled.
   if (scroll_event_changes_tab_ &&
-      !base::FeatureList::IsEnabled(tabs::kScrollableTabStrip)) {
+      !base::FeatureList::IsEnabled(tabs::kScrollableTabStrip) && !tabs::AreHeliumVerticalTabsEnabled()) {
     // Switch to the left/right tab if the wheel-scroll happens over the
     // tabstrip, or the empty space beside the tabstrip.
     views::View* hit_view = GetEventHandlerForPoint(event.location());
--- a/chrome/browser/ui/views/frame/browser_view_layout.cc
+++ b/chrome/browser/ui/views/frame/browser_view_layout.cc
@@ -540,10 +540,22 @@ void BrowserViewLayout::LayoutTabStripRe
   if (web_app_frame_toolbar_) {
     tab_strip_region_bounds.Inset(gfx::Insets::TLBR(
         0, 0, 0, web_app_frame_toolbar_->GetPreferredSize().width()));
+  } else if (tabs::AreHeliumVerticalTabsEnabled()) {
+    int top_offset = tab_strip_region_bounds.height();
+    tab_strip_region_bounds = gfx::Rect(0, top_offset,
+        BrowserView::kVerticalTabStripWidth,
+        available_bounds.height() - top_offset);
   }
 
   if (tabs::AreVerticalTabsEnabled() && IsVerticalTabsEnabled()) {
     SetViewVisibility(tab_strip_region_view_, false);
+  } else if (tabs::AreHeliumVerticalTabsEnabled()) {
+    SetViewVisibility(tab_strip_region_view_, true);
+    available_bounds.set_x(available_bounds.x() +
+                         BrowserView::kVerticalTabStripWidth);
+    tab_strip_region_view_->SetBoundsRect(tab_strip_region_bounds);
+    top_container_->ReorderChildView(tab_strip_region_view_,
+                                     top_container_->children().size());
   } else {
     SetViewVisibility(tab_strip_region_view_, true);
     tab_strip_region_view_->SetBoundsRect(tab_strip_region_bounds);
@@ -572,19 +584,19 @@ void BrowserViewLayout::LayoutToolbar(gf
   bool toolbar_visible = delegate_->IsToolbarVisible();
   SetViewVisibility(toolbar_, toolbar_visible);
 
-  if (tabs::AreVerticalTabsEnabled() && IsVerticalTabsEnabled()) {
+  if ((tabs::AreVerticalTabsEnabled() && IsVerticalTabsEnabled())
+      || tabs::AreHeliumVerticalTabsEnabled()) {
     // When vertical tabs is enabled, the top element becomes the toolbar.
     // Because of this, it must now be aware of the location of the caption
     // buttons. We can reuse the calculation use by the TabStripRegionView to
     // get this information until we have a way to directly query for the
     // caption button location directly.
-    gfx::Rect toolbar_bounds(
+    gfx::Rect tab_strip_region_bounds(
         delegate_->GetBoundsForTabStripRegionInBrowserView());
-    toolbar_bounds.set_x(available_bounds.x());
-    toolbar_bounds.set_width(toolbar_bounds.width() -
-                             BrowserView::kVerticalTabStripWidth);
-    toolbar_->SetBounds(toolbar_bounds.x(), toolbar_bounds.y(),
-                        toolbar_bounds.width(), toolbar_bounds.height());
+
+    int height = toolbar_visible ? tab_strip_region_bounds.height() : 0;
+    toolbar_->SetBounds(tab_strip_region_bounds.x(), available_bounds.y(),
+                        tab_strip_region_bounds.width(), height);
   } else {
     int height = toolbar_visible ? toolbar_->GetPreferredSize().height() : 0;
     int width = available_bounds.width();
@@ -727,8 +739,9 @@ BrowserViewLayout::CalculateContentsCont
   contents_container_bounds.set_height(available_bounds.height() -
                                        available_bounds.y());
   int vertical_tab_offset = 0;
-  if (tabs::AreVerticalTabsEnabled() && IsVerticalTabsEnabled()) {
+  if ((tabs::AreVerticalTabsEnabled() && IsVerticalTabsEnabled()) || (delegate_->ShouldDrawTabStrip() && tabs::AreHeliumVerticalTabsEnabled())) {
     vertical_tab_offset = BrowserView::kVerticalTabStripWidth;
+    contents_container_bounds.set_x(vertical_tab_offset);
     contents_container_bounds.set_width(available_bounds.width() -
                                         vertical_tab_offset);
   }
--- a/chrome/browser/ui/views/frame/browser_view.h
+++ b/chrome/browser/ui/views/frame/browser_view.h
@@ -138,7 +138,7 @@ class BrowserView : public BrowserWindow
 
  public:
   // The width of the vertical tab strip.
-  static constexpr int kVerticalTabStripWidth = 240;
+  static constexpr int kVerticalTabStripWidth = 210;
 
   explicit BrowserView(std::unique_ptr<Browser> browser);
   BrowserView(const BrowserView&) = delete;
