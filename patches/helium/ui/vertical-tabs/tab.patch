--- a/chrome/browser/ui/views/tabs/tab_hover_card_bubble_view.cc
+++ b/chrome/browser/ui/views/tabs/tab_hover_card_bubble_view.cc
@@ -25,6 +25,7 @@
 #include "chrome/browser/ui/tabs/saved_tab_groups/collaboration_messaging_tab_data.h"
 #include "chrome/browser/ui/tabs/tab_renderer_data.h"
 #include "chrome/browser/ui/tabs/tab_style.h"
+#include "chrome/browser/ui/tabs/features.h"
 #include "chrome/browser/ui/thumbnails/thumbnail_image.h"
 #include "chrome/browser/ui/ui_features.h"
 #include "chrome/browser/ui/views/chrome_typography.h"
@@ -363,7 +364,9 @@ DEFINE_CLASS_ELEMENT_IDENTIFIER_VALUE(Ta
 TabHoverCardBubbleView::TabHoverCardBubbleView(Tab* tab,
                                                const InitParams& params)
     : BubbleDialogDelegateView(tab,
-                               views::BubbleBorder::TOP_LEFT,
+                               tabs::AreHeliumVerticalTabsEnabled() ?
+                                  views::BubbleBorder::LEFT_TOP :
+                                  views::BubbleBorder::TOP_LEFT,
                                views::BubbleBorder::STANDARD_SHADOW),
       tab_style_(TabStyle::Get()),
       bubble_params_(params) {
--- a/chrome/browser/ui/views/tabs/tab_style_views.cc
+++ b/chrome/browser/ui/views/tabs/tab_style_views.cc
@@ -21,6 +21,7 @@
 #include "chrome/browser/ui/tabs/tab_style.h"
 #include "chrome/browser/ui/tabs/tab_types.h"
 #include "chrome/browser/ui/ui_features.h"
+#include "chrome/browser/ui/tabs/features.h"
 #include "chrome/browser/ui/views/frame/browser_non_client_frame_view.h"
 #include "chrome/browser/ui/views/frame/browser_view.h"
 #include "chrome/browser/ui/views/frame/top_container_background.h"
@@ -215,7 +216,10 @@ SkPath TabStyleViewsImpl::GetPath(TabSty
   // tab width (in DIP), not our new, scaled-and-aligned bounds.
   float content_corner_radius =
       GetTopCornerRadiusForWidth(tab()->width()) * scale;
-  float extension_corner_radius = tab_style()->GetBottomCornerRadius() * scale;
+
+  float extension_corner_radius = tabs::AreHeliumVerticalTabsEnabled() ?
+                                    6 * scale :
+                                    tab_style()->GetBottomCornerRadius() * scale;
 
   const float separator_overlap = (tab_style()->GetSeparatorMargins().width() +
                                    tab_style()->GetSeparatorSize().width()) *
@@ -271,7 +275,8 @@ SkPath TabStyleViewsImpl::GetPath(TabSty
     const bool expand_into_next_separator =
         limited_tab_space || path_type == TabStyle::PathType::kHitTest ||
         IsLeftSplitTab(tab());
-    if (expand_into_previous_separator || expand_into_next_separator) {
+    if (!tabs::AreHeliumVerticalTabsEnabled() &&
+        (expand_into_previous_separator || expand_into_next_separator)) {
       // If there is a tab before this one, then expand into its overlap.
       const Tab* const previous_tab = GetLeftTab(tab());
       if (expand_into_previous_separator && previous_tab) {
@@ -286,12 +291,22 @@ SkPath TabStyleViewsImpl::GetPath(TabSty
     }
 
     if (tab()->split().has_value()) {
-      if (IsLeftSplitTab(tab())) {
-        top_right_corner_radius = 0;
-        bottom_right_corner_radius = 0;
-      } else if (IsRightSplitTab(tab())) {
-        top_left_corner_radius = 0;
-        bottom_left_corner_radius = 0;
+      if (tabs::AreHeliumVerticalTabsEnabled()) {
+        if (IsLeftSplitTab(tab())) {
+          bottom_left_corner_radius = 0;
+          bottom_right_corner_radius = 0;
+        } else if (IsRightSplitTab(tab())) {
+          top_left_corner_radius = 0;
+          top_right_corner_radius = 0;
+        }
+      } else {
+        if (IsLeftSplitTab(tab())) {
+          top_right_corner_radius = 0;
+          bottom_right_corner_radius = 0;
+        } else if (IsRightSplitTab(tab())) {
+          top_left_corner_radius = 0;
+          bottom_left_corner_radius = 0;
+        }
       }
     }
 
@@ -492,10 +507,10 @@ gfx::Insets TabStyleViewsImpl::GetConten
       tab_style()->GetSeparatorMargins().left() +
       tab_style()->GetSeparatorSize().width() +
       tab_style()->GetSeparatorMargins().right();
-  if (IsRightSplitTab(tab())) {
+  if (IsRightSplitTab(tab()) && !tabs::AreHeliumVerticalTabsEnabled()) {
     split_insets.set_left(total_separator_width / -2);
   }
-  if (IsLeftSplitTab(tab())) {
+  if (IsLeftSplitTab(tab()) && !tabs::AreHeliumVerticalTabsEnabled()) {
     split_insets.set_right(total_separator_width / -2);
   }
 
@@ -1030,6 +1045,8 @@ void TabStyleViewsImpl::PaintBackgroundS
 }
 
 void TabStyleViewsImpl::PaintSeparators(gfx::Canvas* canvas) const {
+  if (tabs::AreHeliumVerticalTabsEnabled()) return;
+
   const auto separator_opacities = GetSeparatorOpacities(false);
   if (!separator_opacities.left && !separator_opacities.right) {
     return;
--- a/chrome/browser/ui/views/tabs/tab_width_constraints.cc
+++ b/chrome/browser/ui/views/tabs/tab_width_constraints.cc
@@ -10,8 +10,9 @@
 #include "ui/gfx/animation/tween.h"
 
 TabWidthConstraints::TabWidthConstraints(const TabLayoutState& state,
-                                         const TabSizeInfo& size_info)
-    : state_(state), size_info_(size_info) {}
+                                         const TabSizeInfo& size_info,
+                                         const bool part_of_group)
+    : state_(state), size_info_(size_info), part_of_group_(part_of_group) {}
 
 float TabWidthConstraints::GetMinimumWidth() const {
   const float min_width = state_.active() == TabActive::kActive
@@ -38,3 +39,7 @@ float TabWidthConstraints::TransformForP
     return width;
   }
 }
+
+bool TabWidthConstraints::IsPartOfGroup() const {
+  return part_of_group_;
+}
--- a/chrome/browser/ui/views/tabs/tab_width_constraints.h
+++ b/chrome/browser/ui/views/tabs/tab_width_constraints.h
@@ -12,7 +12,8 @@
 class TabWidthConstraints {
  public:
   TabWidthConstraints(const TabLayoutState& state,
-                      const TabSizeInfo& size_info);
+                      const TabSizeInfo& size_info,
+                      const bool part_of_group);
 
   // The smallest width this tab should ever have.
   float GetMinimumWidth() const;
@@ -26,6 +27,8 @@ class TabWidthConstraints {
   // The width this tab would like to have, if space is available.
   float GetPreferredWidth() const;
 
+  bool IsPartOfGroup() const;
+
   const TabLayoutState get_state() const { return state_; }
 
  private:
@@ -34,6 +37,7 @@ class TabWidthConstraints {
 
   TabLayoutState state_;
   TabSizeInfo size_info_;
+  bool part_of_group_;
 };
 
 #endif  // CHROME_BROWSER_UI_VIEWS_TABS_TAB_WIDTH_CONSTRAINTS_H_
--- a/chrome/browser/ui/tabs/tab_style.cc
+++ b/chrome/browser/ui/tabs/tab_style.cc
@@ -26,6 +26,7 @@ constexpr int kChromeRefreshSeparatorHei
 // The padding from the top of the tab to the content area.
 constexpr int kChromeRefreshTabVerticalPadding = 6;
 constexpr int kChromeRefreshTabHorizontalPadding = 7;
+constexpr int kChromeRefreshTabHorizontalPaddingVertical = 5;
 
 // The standard tab width is 232 DIP, excluding separators and overlap.
 constexpr int kTabWidth = 200;
@@ -70,7 +71,7 @@ int TabStyle::GetMinimumActiveWidth(cons
   const gfx::Insets insets = GetContentsInsets();
   const int min_active_width =
       close_button_size + insets.left() + insets.right();
-  if (base::FeatureList::IsEnabled(tabs::kScrollableTabStrip)) {
+  if ((false)) {
     return std::max(
         min_active_width,
         base::GetFieldTrialParamByFeatureAsInt(
@@ -181,11 +182,14 @@ SkColor TabStyle::GetTabBackgroundColor(
 }
 
 gfx::Insets TabStyle::GetContentsInsets() const {
+  const int horizontal_padding = tabs::AreHeliumVerticalTabsEnabled()
+                                      ? kChromeRefreshTabHorizontalPaddingVertical
+                                      : kChromeRefreshTabHorizontalPadding;
   return gfx::Insets::TLBR(
       kChromeRefreshTabVerticalPadding + GetLayoutConstant(TAB_STRIP_PADDING),
-      GetBottomCornerRadius() + kChromeRefreshTabHorizontalPadding,
+      GetBottomCornerRadius() + horizontal_padding,
       kChromeRefreshTabVerticalPadding + GetLayoutConstant(TAB_STRIP_PADDING),
-      GetBottomCornerRadius() + kChromeRefreshTabHorizontalPadding);
+      GetBottomCornerRadius() + horizontal_padding);
 }
 
 float TabStyle::GetSelectedTabOpacity() const {
