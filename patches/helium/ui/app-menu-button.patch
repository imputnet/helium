--- a/chrome/browser/ui/views/toolbar/browser_app_menu_button.cc
+++ b/chrome/browser/ui/views/toolbar/browser_app_menu_button.cc
@@ -161,13 +161,8 @@ void BrowserAppMenuButton::UpdateIcon()
 }
 
 void BrowserAppMenuButton::UpdateInkdrop() {
-  if (IsLabelPresentAndVisible()) {
-    ConfigureToolbarInkdropForRefresh2023(this, kColorAppMenuChipInkDropHover,
-                                          kColorAppMenuChipInkDropRipple);
-  } else {
-    ConfigureToolbarInkdropForRefresh2023(this, kColorToolbarInkDropHover,
-                                          kColorToolbarInkDropRipple);
-  }
+  ConfigureToolbarInkdropForRefresh2023(this, kColorToolbarInkDropHover,
+                                        kColorToolbarInkDropRipple);
 }
 
 bool BrowserAppMenuButton::IsLabelPresentAndVisible() const {
@@ -178,14 +173,6 @@ bool BrowserAppMenuButton::IsLabelPresen
 }
 
 SkColor BrowserAppMenuButton::GetForegroundColor(ButtonState state) const {
-  if (IsLabelPresentAndVisible()) {
-    const auto* const color_provider = GetColorProvider();
-    if (type_and_severity_.use_primary_colors) {
-      return color_provider->GetColor(kColorAppMenuExpandedForegroundPrimary);
-    }
-    return color_provider->GetColor(kColorAppMenuExpandedForegroundDefault);
-  }
-
   return ToolbarButton::GetForegroundColor(state);
 }
 
@@ -197,23 +184,7 @@ void BrowserAppMenuButton::UpdateTextAnd
   } else if (type_and_severity_.type ==
              AppMenuIconController::IconType::UPGRADE_NOTIFICATION) {
     tooltip_message_id = IDS_APPMENU_TOOLTIP_UPDATE_AVAILABLE;
-#if BUILDFLAG(GOOGLE_CHROME_BRANDING) && \
-    (BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_LINUX))
-    int message_id = IDS_APP_MENU_BUTTON_UPDATE;
-    // Select an update text option randomly. Show this text in all browser
-    // windows.
-    static const int update_text_option = base::RandInt(1, 3);
-    if (update_text_option == 1) {
-      message_id = IDS_APP_MENU_BUTTON_UPDATE_ALT1;
-    } else if (update_text_option == 2) {
-      message_id = IDS_APP_MENU_BUTTON_UPDATE_ALT2;
-    } else {
-      message_id = IDS_APP_MENU_BUTTON_UPDATE_ALT3;
-    }
-    text = l10n_util::GetStringUTF16(message_id);
-#else
     text = l10n_util::GetStringUTF16(IDS_APP_MENU_BUTTON_UPDATE);
-#endif
   } else if (type_and_severity_.type ==
              AppMenuIconController::IconType::DEFAULT_BROWSER_PROMPT) {
 #if !BUILDFLAG(IS_ANDROID) && !BUILDFLAG(IS_CHROMEOS)
@@ -236,37 +207,19 @@ void BrowserAppMenuButton::UpdateTextAnd
 }
 
 bool BrowserAppMenuButton::ShouldPaintBorder() const {
-  return false;
+  return true;
 }
 
 void BrowserAppMenuButton::UpdateLayoutInsets() {
-  if (IsLabelPresentAndVisible()) {
-    SetLayoutInsets(::GetLayoutInsets(BROWSER_APP_MENU_CHIP_PADDING));
-  } else {
-    SetLayoutInsets(::GetLayoutInsets(TOOLBAR_BUTTON));
-  }
+  SetLayoutInsets(::GetLayoutInsets(TOOLBAR_BUTTON));
 }
 
 std::optional<SkColor> BrowserAppMenuButton::GetHighlightTextColor() const {
-  if (IsLabelPresentAndVisible()) {
-    const auto* const color_provider = GetColorProvider();
-    if (type_and_severity_.use_primary_colors) {
-      return color_provider->GetColor(kColorAppMenuExpandedForegroundPrimary);
-    }
-    return color_provider->GetColor(kColorAppMenuExpandedForegroundDefault);
-  }
   return std::nullopt;
 }
 
 std::optional<SkColor> BrowserAppMenuButton::GetHighlightColor() const {
-  const auto* const color_provider = GetColorProvider();
-  if (type_and_severity_.severity == AppMenuIconController::Severity::NONE) {
-    return std::nullopt;
-  } else {
-    return color_provider->GetColor(type_and_severity_.use_primary_colors
-                                        ? kColorAppMenuHighlightPrimary
-                                        : kColorAppMenuHighlightDefault);
-  }
+  return std::nullopt;
 }
 
 void BrowserAppMenuButton::OnTouchUiChanged() {
