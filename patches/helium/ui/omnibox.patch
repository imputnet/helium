--- a/chrome/browser/ui/views/omnibox/rounded_omnibox_results_frame.cc
+++ b/chrome/browser/ui/views/omnibox/rounded_omnibox_results_frame.cc
@@ -37,7 +37,7 @@
 namespace {
 
 // Value from the spec controlling appearance of the shadow.
-constexpr int kElevation = 16;
+constexpr int kElevation = 8;
 
 #if !defined(USE_AURA)
 
@@ -163,7 +163,9 @@ class TopBackgroundView : public views::
     // not antialiased, since the goal is to completely cover the underlying
     // pixels, and AA would let those on the edge partly bleed through.
     SetBackground(location_bar_->CreateRoundRectBackground(
-        SK_ColorTRANSPARENT, background_color, SkBlendMode::kSrc, false));
+        SK_ColorTRANSPARENT, background_color, SkBlendMode::kSrc,
+        /*antialias=*/false,
+        /*should_border_scale=*/true));
   }
 
 #if !defined(USE_AURA)
@@ -216,7 +218,7 @@ END_METADATA
 // Insets used to position |contents_| within |contents_host_|.
 gfx::Insets GetContentInsets() {
   return gfx::Insets::TLBR(
-      RoundedOmniboxResultsFrame::GetNonResultSectionHeight(), 0, 0, 0);
+      RoundedOmniboxResultsFrame::GetNonResultSectionHeight() - 4, 0, 0, 0);
 }
 
 }  // namespace
@@ -233,8 +235,7 @@ RoundedOmniboxResultsFrame::RoundedOmnib
   contents_host_->layer()->SetFillsBoundsOpaquely(false);
 
   // Use rounded corners.
-  const int corner_radius = views::LayoutProvider::Get()->GetCornerRadiusMetric(
-      views::ShapeContextTokens::kOmniboxExpandedRadius);
+  const int corner_radius = 12;
   contents_host_->layer()->SetRoundedCornerRadius(
       gfx::RoundedCornersF(corner_radius));
   contents_host_->layer()->SetIsFastRoundedCorner(true);
@@ -249,6 +250,7 @@ RoundedOmniboxResultsFrame::RoundedOmnib
       views::BubbleBorder::Shadow::STANDARD_SHADOW);
   border->set_rounded_corners(gfx::RoundedCornersF(corner_radius));
   border->set_md_shadow_elevation(kElevation);
+  border->set_draw_border_stroke(true);
   SetBorder(std::move(border));
 
   AddChildViewRaw(contents_host_.get());
@@ -285,10 +287,10 @@ int RoundedOmniboxResultsFrame::GetNonRe
 
 // static
 gfx::Insets RoundedOmniboxResultsFrame::GetLocationBarAlignmentInsets() {
-  if (ui::TouchUiController::Get()->touch_ui()) {
+  if ((false)) {
     return gfx::Insets::TLBR(6, 1, 5, 1);
   }
-  return gfx::Insets::VH(5, 6);
+  return gfx::Insets::VH(3, 8);
 }
 
 // static
--- a/chrome/browser/ui/views/omnibox/omnibox_result_view.cc
+++ b/chrome/browser/ui/views/omnibox/omnibox_result_view.cc
@@ -192,9 +192,6 @@ OmniboxResultView::OmniboxResultView(Omn
 
   SetLayoutManager(std::make_unique<views::FillLayout>());
 
-  selection_indicator_ =
-      AddChildView(std::make_unique<OmniboxResultSelectionIndicator>());
-
   local_answer_header_and_suggestion_and_buttons_ =
       AddChildView(std::make_unique<views::View>());
   local_answer_header_and_suggestion_and_buttons_
@@ -295,8 +292,9 @@ OmniboxResultView::OmniboxResultView(Omn
               &OmniboxResultView::ButtonPressed, base::Unretained(this),
               OmniboxPopupSelection::FOCUSED_BUTTON_REMOVE_SUGGESTION)));
   remove_suggestion_button_->SetProperty(views::kMarginsKey,
-                                         gfx::Insets::TLBR(0, 0, 0, 16));
-  views::InstallCircleHighlightPathGenerator(remove_suggestion_button_);
+                                         gfx::Insets::TLBR(0, 0, 0, 4));
+  views::InstallRoundRectHighlightPathGenerator(remove_suggestion_button_,
+                                                gfx::Insets::VH(1, 1), 5);
   auto* const remove_focus_ring =
       views::FocusRing::Get(remove_suggestion_button_);
   remove_focus_ring->SetHasFocusPredicate(base::BindRepeating(
@@ -352,10 +350,9 @@ std::unique_ptr<views::Background> Omnib
         /*for_border_thickness=*/0);
   }
 
-  const float half_row_height = OmniboxMatchCellView::kRowHeight / 2;
-  gfx::RoundedCornersF radii = {0, half_row_height, half_row_height, 0};
   return views::CreateRoundedRectBackground(
-      GetOmniboxBackgroundColorId(part_state), radii);
+      GetOmniboxBackgroundColorId(part_state),
+      kIPHBackgroundBorderRadius);
 }
 
 void OmniboxResultView::SetMatch(const AutocompleteMatch& match) {
@@ -508,14 +505,6 @@ void OmniboxResultView::ApplyThemeAndRef
           popup_view_->controller()->client()->GetTemplateURLService())) {
     const OmniboxPopupSelection::LineState line_state =
         popup_view_->GetSelection().state;
-    selection_indicator_->SetVisible(
-        selected &&
-        (line_state == OmniboxPopupSelection::LineState::NORMAL ||
-         line_state == OmniboxPopupSelection::LineState::KEYWORD_MODE));
-  } else {
-    selection_indicator_->SetVisible(selected &&
-                                     popup_view_->GetSelection().state ==
-                                         OmniboxPopupSelection::NORMAL);
   }
 
   if (suggestion_view_->iph_link_view()->GetVisible()) {
--- a/chrome/browser/ui/views/omnibox/omnibox_row_view.cc
+++ b/chrome/browser/ui/views/omnibox/omnibox_row_view.cc
@@ -106,6 +106,8 @@ views::View* OmniboxRowView::GetActiveAu
 }
 
 gfx::Insets OmniboxRowView::GetInsets() const {
+  return gfx::Insets::TLBR(2, 4, 0, 4);
+
   if (result_view_->GetThemeState() == OmniboxPartState::IPH) {
     int LRInsets = OmniboxMatchCellView::kIphOffset;
     return gfx::Insets::TLBR(8, LRInsets, 8, LRInsets);
--- a/chrome/browser/ui/views/omnibox/omnibox_match_cell_view.cc
+++ b/chrome/browser/ui/views/omnibox/omnibox_match_cell_view.cc
@@ -366,7 +366,7 @@ void OmniboxMatchCellView::SetIcon(const
     should_draw_icon_background = false;
   }
 
-  if (should_draw_icon_background) {
+  if ((false)) {
     // When a PEDAL suggestion has been split out to its own row, apply a square
     // background with a distinctive color to the respective icon. Journeys
     // suggestion rows should also receive the same treatment.
@@ -590,7 +590,7 @@ gfx::Size OmniboxMatchCellView::Calculat
   } else if (layout_style_ == LayoutStyle::IPH_SUGGESTION ||
              layout_style_ == LayoutStyle::TOOLBELT) {
     // IPH and toolbelt suggestions have extra height.
-    height = kRowHeight + 4;
+    height = kRowHeight;
   } else {
     // The height for traditional 1-line matches.
     height = kRowHeight;
@@ -611,7 +611,7 @@ int OmniboxMatchCellView::GetImageIndent
   // not derived from other matches' `indent` below.
   if (layout_style_ == LayoutStyle::IPH_SUGGESTION ||
       layout_style_ == LayoutStyle::TOOLBELT) {
-    return 2;
+    return -3;
   }
 
   // The entity, answer, and icon images are horizontally centered within their
@@ -622,7 +622,7 @@ int OmniboxMatchCellView::GetImageIndent
   // b) Entities, answers, and icons continue to be center-aligned.
   // c) Regardless of the state of those other features and their widths.
   // This applies to both touch-UI and non-touch-UI.
-  int indent = 16 + kUniformRowHeightIconSize / 2 - kImageBoundsWidth / 2;
+  int indent = 3 + kUniformRowHeightIconSize / 2 - kImageBoundsWidth / 2;
 
   indent += omnibox_feature_configs::AdjustOmniboxIndent()
                 .Get()
@@ -632,6 +632,8 @@ int OmniboxMatchCellView::GetImageIndent
 }
 
 int OmniboxMatchCellView::GetTextIndent() const {
+  return 30;
+
   // Text indent is added to the `OmniboxMatchCellView::GetInsets()`. It is not
   // added to the image position & size.
 
--- a/chrome/browser/ui/views/omnibox/omnibox_match_cell_view.h
+++ b/chrome/browser/ui/views/omnibox/omnibox_match_cell_view.h
@@ -36,7 +36,7 @@ class OmniboxMatchCellView : public view
 
   // The height of the standard 1-line match row. Multiline & IPH matches have
   // larger heights.
-  static constexpr int kRowHeight = 40;
+  static constexpr int kRowHeight = 28;
 
   // The width of icon, answer, and entity image bounds. These images are
   // smaller than this bounds; they'll be centered within the bounds.
--- a/chrome/browser/ui/views/omnibox/omnibox_popup_view_views.cc
+++ b/chrome/browser/ui/views/omnibox/omnibox_popup_view_views.cc
@@ -593,15 +593,7 @@ gfx::Rect OmniboxPopupViewViews::GetTarg
   // added if the results section has no height (result set is empty or all
   // results are hidden). See https://crbug.com/1076646 for additional context.
   if (popup_height != 0) {
-    // The amount of extra space is dependent on whether the last match is the
-    // toolbelt or not. The toolbelt doesn't have an icon or image on the left
-    // like a regular suggestion nor a big background highlight like an IPH
-    // suggestion so it doesn't require as much space.
-    const size_t last_result_index =
-        autocomplete_controller->result().size() - 1;
-    int kExtraBottomPadding =
-        GetMatchAtIndex(last_result_index).IsToolbelt() ? 2 : 8;
-    popup_height += kExtraBottomPadding;
+    popup_height += 2;
   }
 
   // Add enough space on the top and bottom so it looks like there is the same
--- a/chrome/browser/ui/views/omnibox/omnibox_suggestion_button_row_view.cc
+++ b/chrome/browser/ui/views/omnibox/omnibox_suggestion_button_row_view.cc
@@ -73,7 +73,7 @@ class OmniboxSuggestionRowChip : public
                               views::DISTANCE_RELATED_BUTTON_HORIZONTAL)));
 
     SetImageLabelSpacing(5);
-    SetCustomPadding(gfx::Insets::VH(0, 7));
+    SetCustomPadding(gfx::Insets::VH(0, 6));
     SetCornerRadius(100);  // Large number to ensure 100% rounded.
 
     views::InkDrop::Get(this)->GetInkDrop()->SetShowHighlightOnHover(false);
@@ -268,7 +268,7 @@ class OmniboxSuggestionButtonRowLayout :
   //   the suggestion text/view. Additionally, the values here were selected to
   //   produce the designed layout, but they should either be explained further
   //   here or specified with `ChromeLayoutProvider`.
-  gfx::Insets row_insets_ = gfx::Insets::TLBR(6, 4, 6, 0);
+  gfx::Insets row_insets_ = gfx::Insets::TLBR(1, 4, 0, 0);
   gfx::Insets button_insets_ =
       gfx::Insets::TLBR(0, 0, 0,
                         ChromeLayoutProvider::Get()->GetDistanceMetric(
@@ -299,9 +299,8 @@ class OmniboxSuggestionRowButton : publi
                              ui::EF_MIDDLE_MOUSE_BUTTON);
     views::InstallPillHighlightPathGenerator(this);
 
-    SetImageLabelSpacing(8);
-    SetCustomPadding(ChromeLayoutProvider::Get()->GetInsetsMetric(
-        INSETS_OMNIBOX_PILL_BUTTON));
+    SetImageLabelSpacing(6);
+    SetCustomPadding(gfx::Insets::VH(3, 8));
     SetCornerRadius(GetLayoutConstant(TOOLBAR_CORNER_RADIUS));
 
     auto* const ink_drop = views::InkDrop::Get(this);
@@ -314,6 +313,7 @@ class OmniboxSuggestionRowButton : publi
       CHECK(v);
       return v->GetVisible() && v->popup_view_->GetSelection() == v->selection_;
     }));
+    focus_ring->SetOutsetFocusRingDisabled(true);
     focus_ring->SetColorId(kColorOmniboxResultsFocusIndicator);
 
     GetViewAccessibility().SetRole(ax::mojom::Role::kListBoxOption);
