--- a/chrome/browser/ui/toolbar/app_menu_model.cc
+++ b/chrome/browser/ui/toolbar/app_menu_model.cc
@@ -731,9 +731,6 @@ SaveAndShareSubMenuModel::SaveAndShareSu
     if (!sharing_hub::SharingIsDisabledByPolicy(browser->profile())) {
       AddItemWithStringIdAndVectorIcon(
           this, IDC_COPY_URL, IDS_APP_MENU_COPY_LINK, kLinkChromeRefreshIcon);
-      AddItemWithStringIdAndVectorIcon(this, IDC_SEND_TAB_TO_SELF,
-                                       IDS_MENU_SEND_TAB_TO_SELF,
-                                       kDevicesChromeRefreshIcon);
       AddItemWithStringIdAndVectorIcon(this, IDC_QRCODE_GENERATOR,
                                        IDS_APP_MENU_CREATE_QR_CODE,
                                        kQrCodeChromeRefreshIcon);
@@ -877,23 +874,8 @@ void ToolsMenuModel::Build(Browser* brow
   AddItemWithStringIdAndVectorIcon(this, IDC_NAME_WINDOW, IDS_NAME_WINDOW,
                                    kNameWindowIcon);
 
-  if (CustomizeChromePageHandler::IsSupported(
-          NtpCustomBackgroundServiceFactory::GetForProfile(browser->profile()),
-          browser->profile())) {
-    AddItemWithStringIdAndVectorIcon(this, IDC_SHOW_CUSTOMIZE_CHROME_SIDE_PANEL,
-                                     IDS_SHOW_CUSTOMIZE_CHROME_SIDE_PANEL,
-                                     kEditChromeRefreshIcon);
-  }
-
   AddSeparator(ui::NORMAL_SEPARATOR);
 
-  AddItemWithStringIdAndVectorIcon(this, IDC_SHOW_READING_MODE_SIDE_PANEL,
-                                   IDS_SHOW_READING_MODE_SIDE_PANEL,
-                                   kMenuBookChromeRefreshIcon);
-  SetElementIdentifierAt(
-      GetIndexOfCommandId(IDC_SHOW_READING_MODE_SIDE_PANEL).value(),
-      kReadingModeMenuItem);
-
   AddSeparator(ui::NORMAL_SEPARATOR);
 
   AddItemWithStringIdAndVectorIcon(this, IDC_PERFORMANCE, IDS_SHOW_PERFORMANCE,
@@ -1739,22 +1721,8 @@ void AppMenuModel::Build() {
   // Build (and, by extension, Init) should only be called once.
   DCHECK_EQ(0u, GetItemCount());
 
-  if (app_menu_icon_controller_ &&
-      app_menu_icon_controller_->GetTypeAndSeverity().type ==
-          AppMenuIconController::IconType::UPGRADE_NOTIFICATION) {
-    AddSeparator(ui::SPACING_SEPARATOR);
-    const auto update_icon = ui::ImageModel::FromVectorIcon(
-        kBrowserToolsUpdateChromeRefreshIcon,
-        ui::kColorMenuIconOnEmphasizedBackground, kDefaultIconSize);
-    if (browser_defaults::kShowUpgradeMenuItem) {
-      AddItemWithIcon(IDC_UPGRADE_DIALOG, GetUpgradeDialogTitleText(),
-                      update_icon);
-      AddSeparator(ui::SPACING_SEPARATOR);
-    }
-  }
-
-  if (AddSafetyHubMenuItem() || AddGlobalErrorMenuItems() ||
-      AddDefaultBrowserMenuItems()) {
+  if (AddGlobalErrorMenuItems() || AddDefaultBrowserMenuItems() ||
+      AddUpgradeMenuItem()) {
     AddSeparator(ui::NORMAL_SEPARATOR);
   }
 
@@ -1781,32 +1749,6 @@ void AppMenuModel::Build() {
 
   AddSeparator(ui::NORMAL_SEPARATOR);
 
-#if !BUILDFLAG(IS_CHROMEOS)
-  sub_menus_.push_back(std::make_unique<ProfileSubMenuModel>(
-      this, browser()->profile(), browser()->window()->GetColorProvider()));
-  auto* const profile_submenu_model =
-      static_cast<ProfileSubMenuModel*>(sub_menus_.back().get());
-  AddSubMenu(IDC_PROFILE_MENU_IN_APP_MENU,
-             profile_submenu_model->profile_name(), profile_submenu_model);
-  SetIcon(GetIndexOfCommandId(IDC_PROFILE_MENU_IN_APP_MENU).value(),
-          profile_submenu_model->avatar_image_model());
-  SetElementIdentifierAt(
-      GetIndexOfCommandId(IDC_PROFILE_MENU_IN_APP_MENU).value(),
-      kProfileMenuItem);
-  AddSeparator(ui::SPACING_SEPARATOR);
-#endif
-
-  if (!browser_->profile()->IsGuestSession()) {
-    sub_menus_.push_back(
-        std::make_unique<PasswordsAndAutofillSubMenuModel>(this));
-    AddSubMenuWithStringIdAndVectorIcon(
-        this, IDC_PASSWORDS_AND_AUTOFILL_MENU, IDS_PASSWORDS_AND_AUTOFILL_MENU,
-        sub_menus_.back().get(), vector_icons::kPasswordManagerIcon);
-    SetElementIdentifierAt(
-        GetIndexOfCommandId(IDC_PASSWORDS_AND_AUTOFILL_MENU).value(),
-        kPasswordAndAutofillMenuItem);
-  }
-
   if (!browser_->profile()->IsOffTheRecord()) {
     auto recent_tabs_sub_menu =
         std::make_unique<RecentTabsSubMenuModel>(provider_, browser_);
@@ -1828,7 +1770,7 @@ void AppMenuModel::Build() {
         std::make_unique<BookmarkSubMenuModel>(this, browser_);
 
     AddSubMenuWithStringIdAndVectorIcon(
-        this, IDC_BOOKMARKS_MENU, IDS_BOOKMARKS_AND_LISTS_MENU,
+        this, IDC_BOOKMARKS_MENU, IDS_BOOKMARKS_LIST_TITLE,
         bookmark_sub_menu_model_.get(), kBookmarksListsMenuIcon);
     SetElementIdentifierAt(GetIndexOfCommandId(IDC_BOOKMARKS_MENU).value(),
                            kBookmarksMenuItem);
@@ -1845,23 +1787,10 @@ void AppMenuModel::Build() {
         kTabGroupsMenuItem);
   }
 
-  // Extensions sub menu.
-  if (ArePromotionsEnabled() &&
-      base::FeatureList::IsEnabled(features::kExtensionsCollapseMainMenu) &&
-      !extensions::ui_util::HasManageableExtensions(browser_->profile())) {
-    AddItemWithStringIdAndVectorIcon(this, IDC_FIND_EXTENSIONS,
-                                     IDS_FIND_EXTENSIONS,
-                                     vector_icons::kExtensionChromeRefreshIcon);
-    SetElementIdentifierAt(GetIndexOfCommandId(IDC_FIND_EXTENSIONS).value(),
-                           ExtensionsMenuModel::kVisitChromeWebStoreMenuItem);
-  } else {
-    sub_menus_.push_back(std::make_unique<ExtensionsMenuModel>(this, browser_));
-    AddSubMenuWithStringIdAndVectorIcon(
-        this, IDC_EXTENSIONS_SUBMENU, IDS_EXTENSIONS_SUBMENU,
-        sub_menus_.back().get(), vector_icons::kExtensionChromeRefreshIcon);
-    SetElementIdentifierAt(GetIndexOfCommandId(IDC_EXTENSIONS_SUBMENU).value(),
-                           kExtensionsMenuItem);
-  }
+  AddItemWithStringIdAndVectorIcon(
+      this, IDC_EXTENSIONS_SUBMENU_MANAGE_EXTENSIONS,
+      IDS_EXTENSIONS_SUBMENU,
+      vector_icons::kExtensionChromeRefreshIcon);
 
   AddItemWithStringIdAndVectorIcon(this, IDC_CLEAR_BROWSING_DATA,
                                    IDS_CLEAR_BROWSING_DATA,
@@ -1908,9 +1837,6 @@ void AppMenuModel::Build() {
             lens::features::kLensOverlay));
   }
 
-  AddItemWithStringIdAndVectorIcon(this, IDC_SHOW_TRANSLATE, IDS_SHOW_TRANSLATE,
-                                   kTranslateIcon);
-
   CreateFindAndEditSubMenu();
 
   sub_menus_.push_back(
@@ -1959,6 +1885,12 @@ void AppMenuModel::Build() {
 #endif
 #endif
 
+  if (!browser_->profile()->IsIncognitoProfile() && !browser_->profile()->IsGuestSession()) {
+    AddItemWithStringIdAndVectorIcon(this, IDC_SHOW_CUSTOMIZE_CHROME_SIDE_PANEL,
+                                     IDS_SHOW_CUSTOMIZE_CHROME_SIDE_PANEL,
+                                     kEditChromeRefreshIcon);
+  }
+
   AddItemWithStringIdAndVectorIcon(this, IDC_OPTIONS, IDS_SETTINGS,
                                    kSettingsMenuIcon);
 
@@ -2057,35 +1989,22 @@ bool AppMenuModel::AddDefaultBrowserMenu
   return false;
 }
 
-bool AppMenuModel::AddSafetyHubMenuItem() {
-  auto* safety_hub_menu_notification_service =
-      SafetyHubMenuNotificationServiceFactory::GetForProfile(
-          browser_->profile());
-  if (!safety_hub_menu_notification_service) {
-    return false;
-  }
-  safety_hub_menu_notification_service->MaybeTriggerControlSurvey();
+bool AppMenuModel::AddUpgradeMenuItem() {
+  if (app_menu_icon_controller_ &&
+      app_menu_icon_controller_->GetTypeAndSeverity().type ==
+          AppMenuIconController::IconType::UPGRADE_NOTIFICATION &&
+      browser_defaults::kShowUpgradeMenuItem) {
+    const auto update_icon = ui::ImageModel::FromVectorIcon(
+        kBrowserToolsUpdateChromeRefreshIcon,
+        ui::kColorMenuIcon, kDefaultIconSize);
 
-  std::optional<MenuNotificationEntry> notification =
-      safety_hub_menu_notification_service->GetNotificationToShow();
-  if (!notification.has_value()) {
-    return false;
+    AddItemWithIcon(IDC_UPGRADE_DIALOG, GetUpgradeDialogTitleText(),
+                    update_icon);
+
+    return true;
   }
-  base::UmaHistogramEnumeration("Settings.SafetyHub.Impression",
-                                safety_hub::SafetyHubSurfaces::kThreeDotMenu);
-  base::UmaHistogramEnumeration(
-      "Settings.SafetyHub.EntryPointImpression",
-      safety_hub::SafetyHubEntryPoint::kMenuNotifications);
-  base::UmaHistogramEnumeration("Settings.SafetyHub.MenuNotificationImpression",
-                                notification->module);
-  const auto safety_hub_icon = ui::ImageModel::FromVectorIcon(
-      kSecurityIcon, ui::kColorMenuIcon, kDefaultIconSize);
-  AddItemWithIcon(notification->command, notification->label, safety_hub_icon);
-  SetExecuteCallbackAt(
-      GetIndexOfCommandId(notification->command).value(),
-      base::BindRepeating(&AppMenuModel::LogSafetyHubInteractionMetrics,
-                          base::Unretained(this), notification->module));
-  return true;
+
+  return false;
 }
 
 #if BUILDFLAG(IS_CHROMEOS)
--- a/chrome/browser/ui/toolbar/app_menu_model.h
+++ b/chrome/browser/ui/toolbar/app_menu_model.h
@@ -278,6 +278,9 @@ class AppMenuModel : public ui::SimpleMe
   // boolean indicating whether any menu items were added.
   bool AddDefaultBrowserMenuItems();
 
+  // Adds a nag to relaunch the browser after an update
+  bool AddUpgradeMenuItem();
+
   // Adds the Safety Hub menu notifications to the menu. Returns a boolean
   // indicating whether any menu items were added.
   [[nodiscard]] bool AddSafetyHubMenuItem();
