--- a/chrome/browser/ui/startup/first_run_service.cc
+++ b/chrome/browser/ui/startup/first_run_service.cc
@@ -23,6 +23,7 @@
 #include "chrome/browser/sync/sync_service_factory.h"
 #include "chrome/browser/ui/profiles/profile_customization_util.h"
 #include "chrome/browser/ui/profiles/profile_picker.h"
+#include "chrome/browser/themes/theme_syncable_service.h"
 #include "chrome/common/chrome_switches.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_registry_simple.h"
@@ -204,6 +205,8 @@ void FirstRunService::OnFirstRunHasExite
 void FirstRunService::FinishFirstRun(FinishedReason reason) {
   SetFirstRunFinished(reason);
 
+  profile_->GetPrefs()->SetBoolean(prefs::kGrayscaleThemeEnabled, true);
+
   // If the reason is `FinishedReason::kForceSignin` the profile is already
   // signed in and finalized. It should not finish the setup again.
   if (identity_manager_->HasPrimaryAccount(signin::ConsentLevel::kSignin) &&
--- a/ui/webui/resources/cr_components/theme_color_picker/theme_color_picker.html.ts
+++ b/ui/webui/resources/cr_components/theme_color_picker/theme_color_picker.html.ts
@@ -13,19 +13,6 @@ export function getHtml(this: ThemeColor
 <cr-grid columns="${this.columns}" role="radiogroup"
     aria-label="${this.i18n('colorsContainerLabel')}">
   <cr-theme-color
-      id="defaultColor"
-      .backgroundColor="${this.defaultColor_.background}"
-      .baseColor="${this.defaultColor_.base}"
-      .foregroundColor="${this.defaultColor_.foreground}"
-      title="${this.i18n('defaultColorName')}"
-      aria-label="${this.i18n('defaultColorName')}"
-      role="radio"
-      ?checked="${this.isDefaultColorSelected_}"
-      aria-checked="${this.isDefaultColorSelected_}"
-      tabindex="${this.tabIndex_(this.isDefaultColorSelected_)}"
-      @click="${this.onDefaultColorClick_}">
-  </cr-theme-color>
-  <cr-theme-color
       id="greyDefaultColor"
       .backgroundColor="${this.greyDefaultColor_.background}"
       .baseColor="${this.greyDefaultColor_.base}"
@@ -38,6 +25,19 @@ export function getHtml(this: ThemeColor
       tabindex="${this.tabIndex_(this.isGreyDefaultColorSelected_)}"
       @click="${this.onGreyDefaultColorClick_}">
   </cr-theme-color>
+  <cr-theme-color
+      id="defaultColor"
+      .backgroundColor="${this.defaultColor_.background}"
+      .baseColor="${this.defaultColor_.base}"
+      .foregroundColor="${this.defaultColor_.foreground}"
+      title="${this.i18n('defaultColorName')}"
+      aria-label="${this.i18n('defaultColorName')}"
+      role="radio"
+      ?checked="${this.isDefaultColorSelected_}"
+      aria-checked="${this.isDefaultColorSelected_}"
+      tabindex="${this.tabIndex_(this.isDefaultColorSelected_)}"
+      @click="${this.onDefaultColorClick_}">
+  </cr-theme-color>
   ${this.colors_.map((item, index) => html`
     <cr-theme-color
         class="chrome-color"
--- a/chrome/browser/themes/theme_service.cc
+++ b/chrome/browser/themes/theme_service.cc
@@ -379,6 +379,8 @@ void ThemeService::UseDefaultTheme() {
   }
 
   ClearThemeData(/*clear_ntp_background=*/true);
+  profile_->GetPrefs()->SetBoolean(prefs::kGrayscaleThemeEnabled, true);
+
   NotifyThemeChanged();
 }
 
