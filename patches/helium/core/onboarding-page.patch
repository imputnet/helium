--- a/components/helium_services/pref_names.h
+++ b/components/helium_services/pref_names.h
@@ -7,12 +7,20 @@
 
 namespace prefs {
 
+inline constexpr char kHeliumPrefPrefix[] = "helium.";
+
 inline constexpr char kHeliumServicesEnabled[] =
     "helium.services.enabled";
 
 inline constexpr char kHeliumServicesOrigin[] =
     "helium.services.origin_override";
 
+inline constexpr char kHeliumServicesConsented[] =
+    "helium.services.user_consented";
+
+inline constexpr char kHeliumDidOnboarding[] =
+    "helium.completed_onboarding";
+
 }  // namespace prefs
 
 #endif  // COMPONENTS_HELIUM_SERVICES_PREF_NAMES_H_
--- a/chrome/browser/ui/browser_ui_prefs.cc
+++ b/chrome/browser/ui/browser_ui_prefs.cc
@@ -201,6 +201,8 @@ void RegisterBrowserUserPrefs(user_prefs
   {
     registry->RegisterBooleanPref(prefs::kHeliumServicesEnabled, true);
     registry->RegisterStringPref(prefs::kHeliumServicesOrigin, "");
+    registry->RegisterBooleanPref(prefs::kHeliumDidOnboarding, false);
+    registry->RegisterBooleanPref(prefs::kHeliumServicesConsented, false);
   }
 
   registry->RegisterBooleanPref(
--- a/chrome/browser/ui/startup/startup_browser_creator_impl.cc
+++ b/chrome/browser/ui/startup/startup_browser_creator_impl.cc
@@ -57,6 +57,7 @@
 #include "chrome/common/chrome_version.h"
 #include "chrome/common/pref_names.h"
 #include "chrome/common/webui_url_constants.h"
+#include "components/helium_services/pref_names.h"
 #include "components/custom_handlers/protocol_handler_registry.h"
 #include "components/prefs/pref_service.h"
 #include "components/privacy_sandbox/privacy_sandbox_features.h"
@@ -480,6 +481,15 @@ StartupBrowserCreatorImpl::DetermineStar
   LaunchResult launch_result =
       tabs.empty() ? LaunchResult::kNormally : LaunchResult::kWithGivenUrls;
 
+  bool no_first_run = base::CommandLine::ForCurrentProcess()->HasSwitch(
+                        switches::kNoFirstRun);
+  if (!is_incognito_or_guest && !no_first_run) {
+    if (!profile_->GetPrefs()->GetBoolean(prefs::kHeliumDidOnboarding)) {
+      UrlsToTabs({ GURL(chrome::kHeliumSetupURL) }, &tabs);
+      return { tabs, LaunchResult::kWithGivenUrls };
+    }
+  }
+
   if (whats_new_enabled && (launch_result == LaunchResult::kWithGivenUrls ||
                             is_incognito_or_guest || is_post_crash_launch)) {
     whats_new::LogStartupType(whats_new::StartupType::kIneligible);
--- a/tools/gritsettings/resource_ids.spec
+++ b/tools/gritsettings/resource_ids.spec
@@ -1206,6 +1206,10 @@
    "META": {"sizes": {"includes": [30],}},
     "includes": [7480],
   },
+  "<(SHARED_INTERMEDIATE_DIR)/components/helium_onboarding/resources.grd": {
+   "META": {"sizes": {"includes": [30],}},
+    "includes": [7510],
+  },
   # END components/ section.
 
   # START ios/ section.
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -8694,6 +8694,7 @@ static_library("browser_generated_files"
     "//chrome/browser/v8_compile_hints/proto",
     "//chrome/browser/web_applications/mojom:mojom_web_apps_enum",
     "//chrome/common/request_header_integrity:buildflags",
+    "//components/helium_onboarding:generated_resources",
     "//components/autofill/core/browser/ml_model/logging:mojo_bindings",
     "//components/data_sharing/data_sharing_internals/webui:mojo_bindings",
     "//components/webui/chrome_urls/mojom:mojo_bindings",
--- a/chrome/chrome_paks.gni
+++ b/chrome/chrome_paks.gni
@@ -463,11 +463,13 @@ template("chrome_extra_paks") {
     if (!is_android && !is_chromeos) {
       sources += [
         "$root_gen_dir/chrome/intro_resources.pak",
+        "$root_gen_dir/components/helium_onboarding/resources/helium_onboarding_generated.pak",
         "$root_gen_dir/chrome/profile_picker_resources.pak",
       ]
       deps += [
         "//chrome/browser/resources/intro:resources",
         "//chrome/browser/resources/signin/profile_picker:resources",
+        "//components/helium_onboarding:generated_resources",
       ]
     }
 
--- a/chrome/common/webui_url_constants.cc
+++ b/chrome/common/webui_url_constants.cc
@@ -121,6 +121,7 @@ base::span<const base::cstring_view> Chr
       kChromeUIPrefsInternalsHost,
       kChromeUIProfileInternalsHost,
       content::kChromeUIQuotaInternalsHost,
+      kHeliumSetupHost,
       kChromeUISignInInternalsHost,
       kChromeUISiteEngagementHost,
 #if !BUILDFLAG(IS_ANDROID)
--- a/chrome/common/webui_url_constants.h
+++ b/chrome/common/webui_url_constants.h
@@ -595,6 +595,8 @@ inline constexpr char kChromeUIProfilePi
 inline constexpr char kChromeUIProfilePickerStartupQuery[] = "startup";
 inline constexpr char kChromeUIProfilePickerGlicQuery[] = "glic";
 inline constexpr char kChromeUIProfilePickerUrl[] = "chrome://profile-picker/";
+inline constexpr char kHeliumSetupHost[] = "setup";
+inline constexpr char kHeliumSetupURL[] = "chrome://setup";
 inline constexpr char kChromeUIHistorySyncOptinHost[] = "history-sync-optin";
 inline constexpr char kChromeUIHistorySyncOptinURL[] =
     "chrome://history-sync-optin/";
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -162,6 +162,10 @@ static_library("ui") {
     "webui/net_internals/net_internals_ui.h",
     "webui/ntp_tiles_internals_ui.cc",
     "webui/ntp_tiles_internals_ui.h",
+    "webui/onboarding/onboarding_handler.cc",
+    "webui/onboarding/onboarding_handler.h",
+    "webui/onboarding/onboarding_page_ui.cc",
+    "webui/onboarding/onboarding_page_ui.h",
     "webui/omnibox/omnibox_page_handler.cc",
     "webui/omnibox/omnibox_page_handler.h",
     "webui/omnibox/omnibox_ui.cc",
--- a/chrome/browser/ui/webui/chrome_web_ui_configs.cc
+++ b/chrome/browser/ui/webui/chrome_web_ui_configs.cc
@@ -38,6 +38,7 @@
 #include "chrome/browser/ui/webui/net_export_ui.h"
 #include "chrome/browser/ui/webui/net_internals/net_internals_ui.h"
 #include "chrome/browser/ui/webui/ntp_tiles_internals_ui.h"
+#include "chrome/browser/ui/webui/onboarding/onboarding_page_ui.h"
 #include "chrome/browser/ui/webui/omnibox/omnibox_ui.h"
 #include "chrome/browser/ui/webui/policy/policy_ui.h"
 #include "chrome/browser/ui/webui/predictors/predictors_ui.h"
@@ -415,6 +416,7 @@ void RegisterChromeWebUIConfigs() {
 #if !BUILDFLAG(IS_CHROMEOS) && !BUILDFLAG(IS_ANDROID)
   map.AddWebUIConfig(std::make_unique<ManagedUserProfileNoticeUIConfig>());
   map.AddWebUIConfig(std::make_unique<IntroUIConfig>());
+  map.AddWebUIConfig(std::make_unique<HeliumOnboardingPageConfig>());
   map.AddWebUIConfig(std::make_unique<ProfileCustomizationUIConfig>());
   map.AddWebUIConfig(std::make_unique<ProfilePickerUIConfig>());
   map.AddWebUIConfig(std::make_unique<SigninErrorUIConfig>());
--- /dev/null
+++ b/chrome/browser/ui/webui/onboarding/onboarding_page_ui.cc
@@ -0,0 +1,41 @@
+// Copyright 2025 The Helium Authors
+// You can use, redistribute, and/or modify this source code under
+// the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+#include "chrome/browser/ui/webui/onboarding/onboarding_page_ui.h"
+
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/ui/webui/onboarding/onboarding_handler.h"
+#include "chrome/browser/ui/webui/settings/search_engines_handler.h"
+#include "chrome/browser/ui/webui/settings/settings_default_browser_handler.h"
+#include "chrome/browser/ui/webui/settings/brave_import_data_handler.h"
+#include "chrome/common/webui_url_constants.h"
+#include "content/public/browser/web_ui_controller.h"
+#include "content/public/browser/web_ui_data_source.h"
+#include "components/helium_onboarding/resources/grit/helium_onboarding_generated.h"
+#include "components/helium_onboarding/resources/grit/helium_onboarding_generated_map.h"
+#include "ui/webui/webui_util.h"
+
+HeliumOnboardingPage::HeliumOnboardingPage(content::WebUI* web_ui) : WebUIController(web_ui) {
+    Profile* profile = Profile::FromWebUI(web_ui);
+    content::WebUIDataSource* source =
+        content::WebUIDataSource::CreateAndAdd(profile, chrome::kHeliumSetupHost);
+
+    webui::SetupWebUIDataSource(
+        source, kHeliumOnboardingGenerated,
+        IDR_HELIUM_ONBOARDING_INDEX_HTML);
+
+    source->UseStringsJs();
+    source->DisableTrustedTypesCSP();
+
+    web_ui->AddMessageHandler(
+        std::make_unique<OnboardingMessageHandler>(profile));
+    web_ui->AddMessageHandler(
+        std::make_unique<settings::SearchEnginesHandler>(profile));
+    web_ui->AddMessageHandler(
+        std::make_unique<settings::DefaultBrowserHandler>());
+    web_ui->AddMessageHandler(
+        std::make_unique<settings::BraveImportDataHandler>());
+}
+
+HeliumOnboardingPage::~HeliumOnboardingPage() = default;
--- /dev/null
+++ b/chrome/browser/ui/webui/onboarding/onboarding_page_ui.h
@@ -0,0 +1,31 @@
+// Copyright 2025 The Helium Authors
+// You can use, redistribute, and/or modify this source code under
+// the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_UI_WEBUI_ONBOARDING_ONBOARDING_PAGE_UI_H_
+#define CHROME_BROWSER_UI_WEBUI_ONBOARDING_ONBOARDING_PAGE_UI_H_
+
+#include "chrome/common/webui_url_constants.h"
+#include "content/public/browser/webui_config.h"
+#include "content/public/browser/web_ui_controller.h"
+
+class HeliumOnboardingPage;
+
+class HeliumOnboardingPageConfig
+    : public content::DefaultWebUIConfig<HeliumOnboardingPage> {
+ public:
+  HeliumOnboardingPageConfig()
+      : DefaultWebUIConfig(content::kChromeUIScheme,
+                           chrome::kHeliumSetupHost) {}
+};
+
+class HeliumOnboardingPage : public content::WebUIController {
+public:
+    explicit HeliumOnboardingPage(content::WebUI* web_ui);
+
+    HeliumOnboardingPage(const HeliumOnboardingPage&) = delete;
+    HeliumOnboardingPage& operator=(const HeliumOnboardingPage&) = delete;
+    ~HeliumOnboardingPage() override;
+};
+
+#endif // CHROME_BROWSER_UI_WEBUI_ONBOARDING_ONBOARDING_PAGE_UI_H_
--- /dev/null
+++ b/chrome/browser/ui/webui/onboarding/onboarding_handler.cc
@@ -0,0 +1,190 @@
+// Copyright 2025 The Helium Authors
+// You can use, redistribute, and/or modify this source code under
+// the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+#include "chrome/browser/ui/webui/onboarding/onboarding_handler.h"
+
+#include "base/functional/bind.h"
+#include "base/strings/string_util.h"
+#include "base/strings/utf_string_conversions.h"
+#include "base/values.h"
+#include "chrome/browser/browser_process.h"
+#include "chrome/browser/profiles/profile_attributes_storage.h"
+#include "chrome/browser/profiles/profile_manager.h"
+#include "chrome/browser/profiles/profiles_state.h"
+#include "chrome/browser/themes/theme_service.h"
+#include "chrome/browser/themes/theme_service_factory.h"
+#include "chrome/browser/ui/color/chrome_color_id.h"
+#include "components/helium_services/pref_names.h"
+#include "components/prefs/pref_change_registrar.h"
+#include "components/prefs/pref_service.h"
+#include "content/public/browser/web_contents.h"
+#include "ui/color/color_provider.h"
+#include "ui/gfx/color_utils.h"
+
+OnboardingMessageHandler::OnboardingMessageHandler(Profile* profile)
+    : profile_(profile),
+      pref_service_(profile->GetPrefs()) {
+    pref_change_registrar_.Init(pref_service_);
+
+    for (const auto [ key, _ ] : GetPreferencesDict()) {
+        pref_change_registrar_.Add(
+            prefs::kHeliumPrefPrefix + key,
+            base::BindRepeating(
+                &OnboardingMessageHandler::OnPreferencesChanged,
+                base::Unretained(this)
+            )
+        );
+    }
+
+    ThemeServiceFactory::GetForProfile(profile_)->AddObserver(this);
+}
+
+OnboardingMessageHandler::~OnboardingMessageHandler() {
+    ThemeServiceFactory::GetForProfile(profile_)->RemoveObserver(this);
+}
+
+base::Value::Dict OnboardingMessageHandler::GetPreferencesDict() {
+    std::vector<PrefService::PreferenceValueAndStore> values =
+        pref_service_->GetPreferencesValueAndStore();
+    base::Value::Dict output;
+
+    for (const auto& [name, value, _] : values) {
+        if (!base::StartsWith(name, prefs::kHeliumPrefPrefix,
+                base::CompareCase::SENSITIVE)) {
+            continue;
+        }
+
+        output.Set(
+            name.substr(sizeof(prefs::kHeliumPrefPrefix) - 1),
+            value.Clone()
+        );
+    }
+
+    return output;
+}
+
+void OnboardingMessageHandler::OnThemeChanged() {
+    AllowJavascript();
+    FireWebUIListener("ntp-background-changed", GetNTPBackgroundColor());
+}
+
+void OnboardingMessageHandler::OnPreferencesChanged() {
+    AllowJavascript();
+    FireWebUIListener("helium-prefs-changed", GetPreferencesDict());
+}
+
+void OnboardingMessageHandler::RegisterMessages() {
+    web_ui()->RegisterMessageCallback(
+        "getPrefs",
+        base::BindRepeating(&OnboardingMessageHandler::HandleGetPreferences,
+                            base::Unretained(this)));
+
+    web_ui()->RegisterMessageCallback(
+        "setPref",
+        base::BindRepeating(&OnboardingMessageHandler::HandleSetPreference,
+                            base::Unretained(this)));
+
+    web_ui()->RegisterMessageCallback(
+        "getProfileName",
+        base::BindRepeating(&OnboardingMessageHandler::HandleGetProfileName,
+                            base::Unretained(this)));
+
+    web_ui()->RegisterMessageCallback(
+        "setProfileName",
+        base::BindRepeating(&OnboardingMessageHandler::HandleSetProfileName,
+                            base::Unretained(this)));
+
+    web_ui()->RegisterMessageCallback(
+        "getBackgroundColor",
+        base::BindRepeating(&OnboardingMessageHandler::HandleGetBackgroundColor,
+                            base::Unretained(this)));
+}
+
+base::Value OnboardingMessageHandler::GetNTPBackgroundColor() {
+    return base::Value(
+        color_utils::SkColorToRgbaString(
+            web_ui()
+                ->GetWebContents()
+                ->GetColorProvider().GetColor(kColorNewTabPageBackground)
+        )
+    );
+}
+
+void OnboardingMessageHandler::HandleGetBackgroundColor(const base::Value::List& args) {
+    CHECK_EQ(1U, args.size());
+    const auto& callback_id = args[0].GetString();
+
+    AllowJavascript();
+    ResolveJavascriptCallback(
+        base::Value(callback_id), GetNTPBackgroundColor());
+}
+
+void OnboardingMessageHandler::HandleGetPreferences(const base::Value::List& args) {
+    CHECK_EQ(1U, args.size());
+    const auto& callback_id = args[0].GetString();
+
+    AllowJavascript();
+    ResolveJavascriptCallback(
+        base::Value(callback_id), base::Value(GetPreferencesDict()));
+}
+
+void OnboardingMessageHandler::HandleGetProfileName(const base::Value::List& args) {
+    CHECK_EQ(1U, args.size());
+    const auto& callback_id = args[0].GetString();
+
+    ProfileAttributesEntry* entry =
+        g_browser_process->profile_manager()
+            ->GetProfileAttributesStorage()
+            .GetProfileAttributesWithPath(profile_->GetPath());
+
+    if (!entry) {
+        return RejectJavascriptCallback(callback_id, "entry not found");
+    }
+
+    AllowJavascript();
+    ResolveJavascriptCallback(
+        base::Value(callback_id),
+        base::Value(entry->GetLocalProfileName()));
+}
+
+void OnboardingMessageHandler::HandleSetProfileName(const base::Value::List& args) {
+    CHECK_EQ(1U, args.size());
+    std::u16string new_name = base::UTF8ToUTF16(args[0].GetString());
+    base::TrimWhitespace(new_name, base::TRIM_ALL, &new_name);
+
+    if (!new_name.empty()) {
+        profiles::UpdateProfileName(profile_, new_name);
+    }
+}
+
+void OnboardingMessageHandler::HandleSetPreference(const base::Value::List& args) {
+    if (args.size() == 0) {
+        return;
+    }
+
+    AllowJavascript();
+
+    const auto& callback_id = args[0].GetString();
+    if (args.size() != 3) {
+        return RejectJavascriptCallback(callback_id, "invalid arguments");
+    }
+
+    if (!args[1].is_string()) {
+        return RejectJavascriptCallback(callback_id, "pref is not a string");
+    }
+
+    const auto& pref_name = prefs::kHeliumPrefPrefix + args[1].GetString();
+    auto* pref = pref_service_->FindPreference(pref_name);
+    if (!pref) {
+        return RejectJavascriptCallback(callback_id, pref_name + " does not exist");
+    }
+
+    if (args[2].type() != pref->GetType()) {
+        return RejectJavascriptCallback(callback_id, "invalid value type");
+    }
+
+    pref_service_->Set(pref_name, args[2].Clone());
+
+    ResolveJavascriptCallback(callback_id, {});
+}
--- /dev/null
+++ b/chrome/browser/ui/webui/onboarding/onboarding_handler.h
@@ -0,0 +1,51 @@
+// Copyright 2025 The Helium Authors
+// You can use, redistribute, and/or modify this source code under
+// the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_UI_WEBUI_ONBOARDING_ONBOARDING_HANDLER_H_
+#define CHROME_BROWSER_UI_WEBUI_ONBOARDING_ONBOARDING_HANDLER_H_
+
+#include <optional>
+#include <string>
+
+#include "base/memory/raw_ptr.h"
+#include "base/memory/weak_ptr.h"
+#include "base/values.h"
+#include "chrome/browser/profiles/profile.h"
+#include "components/prefs/pref_service.h"
+#include "components/prefs/pref_change_registrar.h"
+#include "content/public/browser/web_ui_message_handler.h"
+#include "chrome/browser/themes/theme_service_observer.h"
+
+class OnboardingMessageHandler : public content::WebUIMessageHandler,
+                                 public ThemeServiceObserver {
+ public:
+  explicit OnboardingMessageHandler(Profile* profile);
+  OnboardingMessageHandler(const OnboardingMessageHandler&) = delete;
+  OnboardingMessageHandler& operator=(const OnboardingMessageHandler&) = delete;
+  ~OnboardingMessageHandler() override;
+
+  void RegisterMessages() override;
+
+ private:
+  base::Value::Dict GetPreferencesDict();
+  void HandleGetPreferences(const base::Value::List& args);
+  void HandleSetPreference(const base::Value::List& args);
+  void HandleGetProfileName(const base::Value::List& args);
+  void HandleSetProfileName(const base::Value::List& args);
+  void HandleGetBackgroundColor(const base::Value::List& args);
+  void OnPreferencesChanged();
+
+  base::Value GetNTPBackgroundColor();
+
+  // ThemeServiceObserver:
+  void OnThemeChanged() override;
+
+  raw_ptr<Profile> profile_ = nullptr;
+  raw_ptr<PrefService> pref_service_ = nullptr;
+  PrefChangeRegistrar pref_change_registrar_;
+
+  base::WeakPtrFactory<OnboardingMessageHandler> weak_ptr_factory_{this};
+};
+
+#endif // CHROME_BROWSER_UI_WEBUI_ONBOARDING_ONBOARDING_HANDLER_H_
--- a/components/helium_services/helium_services_helpers.cc
+++ b/components/helium_services/helium_services_helpers.cc
@@ -53,12 +53,18 @@ GURL GetDummyURL() {
 }
 
 bool ShouldAccessServices(const PrefService& prefs) {
-    return prefs.GetBoolean(prefs::kHeliumServicesEnabled);
+    // onboarding was completed without touching kHeliumServicesEnabled,
+    // OR the user has explicitly enabled kHeliumServicesEnabled somewhere
+    // (either via onboarding, or user settings)
+    return prefs.GetBoolean(prefs::kHeliumServicesEnabled) &&
+           (prefs.GetBoolean(prefs::kHeliumServicesConsented)
+           || prefs.HasPrefPath(prefs::kHeliumServicesEnabled));
 }
 
 void ConfigurePrefChangeRegistrarFor(std::string_view pref_name,
     PrefChangeRegistrar& registrar, const base::RepeatingClosure& observer) {
   registrar.Add(prefs::kHeliumServicesEnabled, observer);
+  registrar.Add(prefs::kHeliumServicesConsented, observer);
   registrar.Add(prefs::kHeliumServicesOrigin, observer);
   registrar.Add(pref_name, observer);
 }
--- a/chrome/browser/ui/browser_navigator.cc
+++ b/chrome/browser/ui/browser_navigator.cc
@@ -579,7 +579,8 @@ bool IsHostAllowedInIncognito(const GURL
          host != chrome::kChromeUIHelpHost &&
          host != chrome::kChromeUIHistoryHost &&
          host != chrome::kChromeUIExtensionsHost &&
-         host != password_manager::kChromeUIPasswordManagerHost;
+         host != password_manager::kChromeUIPasswordManagerHost &&
+         host != chrome::kHeliumSetupHost;
 }
 
 }  // namespace
--- a/chrome/browser/ui/webui/settings/search_engines_handler.cc
+++ b/chrome/browser/ui/webui/settings/search_engines_handler.cc
@@ -344,7 +344,9 @@ void SearchEnginesHandler::HandleSetDefa
   CHECK(choice_made_location ==
             search_engines::ChoiceMadeLocation::kSearchSettings ||
         choice_made_location ==
-            search_engines::ChoiceMadeLocation::kSearchEngineSettings);
+            search_engines::ChoiceMadeLocation::kSearchEngineSettings ||
+        choice_made_location ==
+            search_engines::ChoiceMadeLocation::kChoiceScreen);
   list_controller_.MakeDefaultTemplateURL(index, choice_made_location);
   base::RecordAction(base::UserMetricsAction("Options_SearchEngineSetDefault"));
 
--- a/chrome/browser/favicon/favicon_utils.cc
+++ b/chrome/browser/favicon/favicon_utils.cc
@@ -188,6 +188,7 @@ bool ShouldThemifyFavicon(GURL url) {
          url.host_piece() != chrome::kChromeUIVersionHost &&
          url.host_piece() != chrome::kChromeUINetExportHost &&
          url.host_piece() != chrome::kChromeUINewTabHost &&
+         url.host_piece() != chrome::kHeliumSetupHost &&
          url.host_piece() != password_manager::kChromeUIPasswordManagerHost;
 }
 
--- a/chrome/app/settings_strings.grdp
+++ b/chrome/app/settings_strings.grdp
@@ -1909,6 +1909,12 @@
   <message name="IDS_SETTINGS_HELIUM_SERVICES_DESCRIPTION" desc="Description of the controls available on the Helium services settings page">
     Manage what Helium services are allowed in your browser
   </message>
+  <message name="IDS_SETTINGS_HELIUM_SERVICES_SETUP_PENDING_TEXT" desc="Description shown in services settings when user has not completed onboarding">
+    Helium services are not available until setup is complete to ensure your privacy and consent.
+  </message>
+  <message name="IDS_SETTINGS_HELIUM_SERVICES_SETUP_PENDING_BUTTON" desc="Button label directing user to complete onboarding">
+    Complete setup
+  </message>
   <message name="IDS_SETTINGS_HELIUM_SERVICES_TOGGLE" desc="Global toggle for enabling/disabling of all Helium services">
     Allow connecting to Helium services
   </message>
--- a/chrome/browser/extensions/api/settings_private/prefs_util.cc
+++ b/chrome/browser/extensions/api/settings_private/prefs_util.cc
@@ -356,6 +356,8 @@ const PrefsUtil::TypedPrefMap& PrefsUtil
       settings_api::PrefType::kBoolean;
   (*s_allowlist)[::prefs::kHeliumServicesOrigin] =
       settings_api::PrefType::kString;
+  (*s_allowlist)[::prefs::kHeliumServicesConsented] =
+      settings_api::PrefType::kBoolean;
 
   // Privacy Guide
   (*s_allowlist)[::prefs::kPrivacyGuideViewed] =
--- a/chrome/browser/resources/settings/privacy_page/services_page.html
+++ b/chrome/browser/resources/settings/privacy_page/services_page.html
@@ -2,9 +2,41 @@
     .label-wrapper {
         padding: var(--cr-section-vertical-padding) 0;
     }
+
+    #onboarding-link {
+        color: var(--text-color-action);
+        text-decoration: none;
+    }
+
+    #onboarding-text {
+        display: flex;
+        align-items: center;
+        max-width: 350px;
+        gap: calc(var(--cr-section-padding) * 0.8);
+    }
+
+    #onboarding-notice {
+        padding: calc(var(--cr-section-padding) / 2) var(--cr-section-padding);
+        justify-content: space-between;
+    }
 </style>
 
 <div class="cr-col first">
+    <template is="dom-if" if="[[!prefs.helium.services.user_consented.value]]">
+        <div class="cr-row" id="onboarding-notice">
+            <div id="onboarding-text">
+                  <cr-icon icon="cr:security" aria-hidden="true"></cr-icon>
+                  <span>$i18n{heliumServicesSetupPendingText}</span>
+            </div>
+            <cr-button class="action-button">
+                <a href="chrome://setup" target="_blank" id="onboarding-link">
+                    $i18n{heliumServicesSetupPendingButton}
+                </a>
+            </cr-button>
+        </div>
+    </template>
+
+    <template is="dom-if" if="[[prefs.helium.services.user_consented.value]]">
     <settings-toggle-button id="servicesToggleButton"
         pref="{{prefs.helium.services.enabled}}"
         label="$i18n{heliumServicesToggle}"
@@ -14,6 +46,7 @@
         <cr-collapse id="servicesCollapse" opened="[[prefs.helium.services.enabled.value]]">
         </cr-collapse>
     </div>
+    </template>
 </div>
 
 
--- a/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
+++ b/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
@@ -1955,6 +1955,8 @@ void AddPrivacyStrings(content::WebUIDat
       {"securityPageDescription", IDS_SETTINGS_SECURITY_DESCRIPTION},
       {"heliumServicesTitle", IDS_SETTINGS_HELIUM_SERVICES},
       {"heliumServicesDescription", IDS_SETTINGS_HELIUM_SERVICES_DESCRIPTION},
+      {"heliumServicesSetupPendingText", IDS_SETTINGS_HELIUM_SERVICES_SETUP_PENDING_TEXT},
+      {"heliumServicesSetupPendingButton", IDS_SETTINGS_HELIUM_SERVICES_SETUP_PENDING_BUTTON},
       {"heliumServicesToggle", IDS_SETTINGS_HELIUM_SERVICES_TOGGLE},
       {"heliumServicesToggleDescription",
         IDS_SETTINGS_HELIUM_SERVICES_TOGGLE_DESCRIPTION},
