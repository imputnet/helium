--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -40,6 +40,7 @@
 #include "chrome/browser/apps/app_discovery_service/app_discovery_service.h"
 #include "chrome/browser/browser_features.h"
 #include "chrome/browser/browser_process.h"
+#include "chrome/browser/channel_selection.h"
 #include "chrome/browser/devtools/features.h"
 #include "chrome/browser/flag_descriptions.h"
 #include "chrome/browser/ip_protection/ip_protection_switches.h"
--- /dev/null
+++ b/chrome/browser/channel_selection.cc
@@ -0,0 +1,28 @@
+// Copyright 2025 The Helium Authors
+// You can use, redistribute, and/or modify this source code under
+// the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+#include <string>
+
+#include "base/command_line.h"
+#include "chrome/browser/channel_selection.h"
+
+namespace helium {
+
+std::string GetSelectedChannel() {
+  auto* command_line = base::CommandLine::ForCurrentProcess();
+
+  if (command_line->HasSwitch(kChannelCommandLine)) {
+    std::string override_channel =
+        command_line->GetSwitchValueASCII(kChannelCommandLine);
+
+    if ((override_channel == kChannelStable) ||
+        (override_channel == kChannelBeta)) {
+      return override_channel;
+    }
+  }
+
+  return kChannelStable;
+}
+
+}  // namespace helium
--- /dev/null
+++ b/chrome/browser/channel_selection.h
@@ -0,0 +1,19 @@
+// Copyright 2025 The Helium Authors
+// You can use, redistribute, and/or modify this source code under
+// the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_CHANNEL_SELECTION_H_
+#define CHROME_BROWSER_CHANNEL_SELECTION_H_
+
+#include <string>
+namespace helium {
+
+constexpr const char kChannelCommandLine[] = "helium-update-channel";
+
+constexpr const char kChannelStable[] = "stable";
+constexpr const char kChannelBeta[] = "beta";
+
+std::string GetSelectedChannel();
+
+}  // namespace helium
+#endif  /* CHROME_BROWSER_CHANNEL_SELECTION_H_ */
--- a/chrome/browser/helium_flag_choices.h
+++ b/chrome/browser/helium_flag_choices.h
@@ -20,6 +20,12 @@ namespace helium {
     {"Disabled", kEnergySaverFrameRateCommandLine, "9001"},
   };
 
+  constexpr const FeatureEntry::Choice kChannelChoices[] = {
+    {flags_ui::kGenericExperimentChoiceAutomatic, "", ""},
+    {kChannelStable, kChannelCommandLine, kChannelStable},
+    {kChannelBeta, kChannelCommandLine, kChannelBeta},
+  };
+
 }  // namespace helium
 
 #endif  /* CHROME_BROWSER_HELIUM_FLAG_CHOICES_H_ */
--- a/chrome/browser/helium_flag_entries.h
+++ b/chrome/browser/helium_flag_entries.h
@@ -4,6 +4,9 @@
 
 #ifndef CHROME_BROWSER_HELIUM_FLAG_ENTRIES_H_
 #define CHROME_BROWSER_HELIUM_FLAG_ENTRIES_H_
+    {helium::kChannelCommandLine,
+     "Update channel", "Selects which update channel to use for update checking. Helium flag.",
+     kOsAll, MULTI_VALUE_TYPE(helium::kChannelChoices)},
     {helium::kEnergySaverFrameRateCommandLine,
      "Maximum frame rate for Energy Saver",
      "Configures the frame rate the browser is throttled to when Energy Saver is enabled. Helium flag.",
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -300,6 +300,8 @@ static_library("browser") {
     "btm/btm_browser_signin_detector_factory.h",
     "btm/stateful_bounce_counter.cc",
     "btm/stateful_bounce_counter.h",
+    "channel_selection.cc",
+    "channel_selection.h",
     "chained_back_navigation_tracker.cc",
     "chained_back_navigation_tracker.h",
     "child_process_host_flags.h",
