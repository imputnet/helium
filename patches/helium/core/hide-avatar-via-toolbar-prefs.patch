--- a/chrome/browser/extensions/api/settings_private/prefs_util.cc
+++ b/chrome/browser/extensions/api/settings_private/prefs_util.cc
@@ -229,6 +229,10 @@ const PrefsUtil::TypedPrefMap& PrefsUtil
   (*s_allowlist)[::prefs::kSplitViewDragAndDropEnabled] =
       settings_api::PrefType::kBoolean;
 
+  // Custom toolbar button settings.
+  (*s_allowlist)[::prefs::kShowAvatarButton] =
+      settings_api::PrefType::kBoolean;
+
   // Appearance settings.
   (*s_allowlist)[::prefs::kCurrentThemeID] = settings_api::PrefType::kString;
   (*s_allowlist)[::prefs::kPinnedActions] = settings_api::PrefType::kList;
--- a/chrome/browser/ui/actions/chrome_action_id.h
+++ b/chrome/browser/ui/actions/chrome_action_id.h
@@ -554,6 +554,7 @@
 #define TOOLBAR_PINNABLE_ACTION_IDS \
   E(kActionHome, IDC_HOME) \
   E(kActionForward, IDC_FORWARD) \
+  E(kActionAvatar, IDC_SHOW_AVATAR_MENU) \
   E(kActionNewIncognitoWindow, IDC_NEW_INCOGNITO_WINDOW) \
   E(kActionSendSharedTabGroupFeedback, IDC_SEND_SHARED_TAB_GROUP_FEEDBACK) \
   E(kActionShowPasswordManager, IDC_SHOW_PASSWORD_MANAGER) \
--- a/chrome/browser/ui/browser_ui_prefs.cc
+++ b/chrome/browser/ui/browser_ui_prefs.cc
@@ -119,6 +119,9 @@ void RegisterBrowserUserPrefs(user_prefs
   registry->RegisterBooleanPref(prefs::kPinSplitTabButton, false,
                                 pref_registration_flags);
 
+  registry->RegisterBooleanPref(
+      prefs::kShowAvatarButton, true);
+
   registry->RegisterInt64Pref(prefs::kDefaultBrowserLastDeclined, 0);
   registry->RegisterBooleanPref(prefs::kWebAppCreateOnDesktop, true);
   registry->RegisterBooleanPref(prefs::kWebAppCreateInAppsMenu, true);
--- a/chrome/browser/ui/toolbar/pinned_toolbar/pinned_toolbar_actions_model.cc
+++ b/chrome/browser/ui/toolbar/pinned_toolbar/pinned_toolbar_actions_model.cc
@@ -216,6 +216,7 @@ void PinnedToolbarActionsModel::UpdatePi
 void PinnedToolbarActionsModel::ResetToDefault() {
   pref_service_->ClearPref(prefs::kShowHomeButton);
   pref_service_->ClearPref(prefs::kShowForwardButton);
+  pref_service_->ClearPref(prefs::kShowAvatarButton);
   pref_service_->ClearPref(prefs::kPinnedActions);
 }
 
@@ -229,7 +230,10 @@ bool PinnedToolbarActionsModel::IsDefaul
   const bool forward_is_default =
       pref_service_->GetDefaultPrefValue(prefs::kShowForwardButton)
           ->GetBool() == pref_service_->GetBoolean(prefs::kShowForwardButton);
-  return action_are_default && home_is_default && forward_is_default;
+  const bool avatar_is_default =
+      pref_service_->GetDefaultPrefValue(prefs::kShowAvatarButton)
+          ->GetBool() == pref_service_->GetBoolean(prefs::kShowAvatarButton);
+  return action_are_default && home_is_default && forward_is_default && avatar_is_default;
 }
 
 void PinnedToolbarActionsModel::MaybeMigrateExistingPinnedStates() {
--- a/chrome/browser/ui/views/toolbar/toolbar_view.cc
+++ b/chrome/browser/ui/views/toolbar/toolbar_view.cc
@@ -463,8 +463,7 @@ void ToolbarView::Init() {
 #else
   // DevTools profiles are OffTheRecord, so hide it there.
   show_avatar_toolbar_button = browser_->profile()->IsIncognitoProfile() ||
-                               browser_->profile()->IsGuestSession() ||
-                               browser_->profile()->IsRegularProfile();
+                               browser_->profile()->IsGuestSession();
 #endif
 
   const std::string sab_value = base::CommandLine::ForCurrentProcess()->
@@ -533,6 +532,17 @@ void ToolbarView::Init() {
 
   home_->SetVisible(show_home_button_.GetValue());
 
+  show_avatar_button_.Init(
+      prefs::kShowAvatarButton, prefs,
+      base::BindRepeating(&ToolbarView::OnShowAvatarButtonChanged,
+                          base::Unretained(this)));
+
+  // avatar is always shown in incognito and guest profiles,
+  // but in regular profiles it's managed by the kShowAvatarButton pref
+  if (browser_->profile()->IsRegularProfile()) {
+    avatar_->SetVisible(show_avatar_button_.GetValue());
+  }
+
   InitLayout();
 
   for (auto* button : std::array<views::Button*, 5>{back_, forward_, reload_,
@@ -1253,6 +1263,10 @@ void ToolbarView::OnShowHomeButtonChange
   home_->SetVisible(show_home_button_.GetValue());
 }
 
+void ToolbarView::OnShowAvatarButtonChanged() {
+  avatar_->SetVisible(show_avatar_button_.GetValue());
+}
+
 void ToolbarView::OnTouchUiChanged() {
   if (display_mode_ == DisplayMode::NORMAL) {
     // Update the internal margins for touch layout.
--- a/chrome/browser/ui/views/toolbar/toolbar_view.h
+++ b/chrome/browser/ui/views/toolbar/toolbar_view.h
@@ -268,6 +268,8 @@ class ToolbarView : public views::Access
 
   void OnShowHomeButtonChanged();
 
+  void OnShowAvatarButtonChanged();
+
   void OnTouchUiChanged();
 
   void UpdateClipPath();
@@ -318,6 +320,8 @@ class ToolbarView : public views::Access
   // Controls whether or not a home button should be shown on the toolbar.
   BooleanPrefMember show_home_button_;
 
+  BooleanPrefMember show_avatar_button_;
+
   BooleanPrefMember show_chrome_labs_button_;
 
   // The display mode used when laying out the toolbar.
--- a/chrome/browser/ui/webui/side_panel/customize_chrome/customize_toolbar/customize_toolbar.mojom
+++ b/chrome/browser/ui/webui/side_panel/customize_chrome/customize_toolbar/customize_toolbar.mojom
@@ -16,6 +16,7 @@ enum ActionId {
   kShowSearchCompanion,
   kHome,
   kForward,
+  kAvatar,
   kNewIncognitoWindow,
   kShowPasswordManager,
   kShowPaymentMethods,
--- a/chrome/browser/ui/webui/side_panel/customize_chrome/customize_toolbar/customize_toolbar_handler.cc
+++ b/chrome/browser/ui/webui/side_panel/customize_chrome/customize_toolbar/customize_toolbar_handler.cc
@@ -50,6 +50,8 @@ MojoActionForChromeAction(actions::Actio
       return side_panel::customize_chrome::mojom::ActionId::kHome;
     case kActionForward:
       return side_panel::customize_chrome::mojom::ActionId::kForward;
+    case kActionAvatar:
+      return side_panel::customize_chrome::mojom::ActionId::kAvatar;
     case kActionNewIncognitoWindow:
       return side_panel::customize_chrome::mojom::ActionId::kNewIncognitoWindow;
     case kActionShowPasswordsBubbleOrPage:
@@ -109,6 +111,8 @@ std::optional<actions::ActionId> ChromeA
       return kActionHome;
     case side_panel::customize_chrome::mojom::ActionId::kForward:
       return kActionForward;
+    case side_panel::customize_chrome::mojom::ActionId::kAvatar:
+      return kActionAvatar;
     case side_panel::customize_chrome::mojom::ActionId::kNewIncognitoWindow:
       return kActionNewIncognitoWindow;
     case side_panel::customize_chrome::mojom::ActionId::kShowPasswordManager:
@@ -174,6 +178,10 @@ CustomizeToolbarHandler::CustomizeToolba
       prefs::kPinSplitTabButton,
       base::BindRepeating(&CustomizeToolbarHandler::OnPinSplitTabButtonChanged,
                           base::Unretained(this)));
+  pref_change_registrar_.Add(
+      prefs::kShowAvatarButton,
+      base::BindRepeating(&CustomizeToolbarHandler::OnShowAvatarButtonChanged,
+                          base::Unretained(this)));
 }
 
 CustomizeToolbarHandler::~CustomizeToolbarHandler() = default;
@@ -219,6 +227,19 @@ void CustomizeToolbarHandler::ListAction
   actions.push_back(std::move(home_action));
   actions.push_back(std::move(forward_action));
 
+  auto avatar_action = side_panel::customize_chrome::mojom::Action::New(
+      MojoActionForChromeAction(kActionAvatar).value(),
+      base::UTF16ToUTF8(l10n_util::GetStringUTF16(IDS_PROFILES_MENU_NAME)),
+      prefs()->GetBoolean(prefs::kShowAvatarButton), false,
+      side_panel::customize_chrome::mojom::CategoryId::kYourChrome,
+      GURL(webui::EncodePNGAndMakeDataURI(
+          ui::ImageModel::FromVectorIcon(
+              vector_icons::kAccountCircleChromeRefreshIcon, icon_color_id)
+              .Rasterize(&provider),
+          scale_factor)));
+
+  actions.push_back(std::move(avatar_action));
+
   if (base::FeatureList::IsEnabled(features::kSideBySide)) {
     auto split_tab_action = side_panel::customize_chrome::mojom::Action::New(
         MojoActionForChromeAction(kActionSplitTab).value(),
@@ -367,6 +388,9 @@ void CustomizeToolbarHandler::PinAction(
     case kActionSplitTab:
       prefs()->SetBoolean(prefs::kPinSplitTabButton, pin);
       break;
+    case kActionAvatar:
+      prefs()->SetBoolean(prefs::kShowAvatarButton, pin);
+      break;
     default:
       model_->UpdatePinnedState(chrome_action.value(), pin);
       const std::optional<std::string> metrics_name =
@@ -420,6 +444,11 @@ void CustomizeToolbarHandler::OnPinSplit
                         prefs()->GetBoolean(prefs::kPinSplitTabButton));
 }
 
+void CustomizeToolbarHandler::OnShowAvatarButtonChanged() {
+  OnActionPinnedChanged(kActionAvatar,
+                        prefs()->GetBoolean(prefs::kShowAvatarButton));
+}
+
 void CustomizeToolbarHandler::OnActionItemChanged() {
   client_->NotifyActionsUpdated();
 }
--- a/chrome/browser/ui/webui/side_panel/customize_chrome/customize_toolbar/customize_toolbar_handler.h
+++ b/chrome/browser/ui/webui/side_panel/customize_chrome/customize_toolbar/customize_toolbar_handler.h
@@ -54,6 +54,7 @@ class CustomizeToolbarHandler
   void OnShowHomeButtonChanged();
   void OnShowForwardButtonChanged();
   void OnPinSplitTabButtonChanged();
+  void OnShowAvatarButtonChanged();
   void OnActionItemChanged();
 
   PrefService* prefs() const;
--- a/chrome/common/pref_names.h
+++ b/chrome/common/pref_names.h
@@ -1341,6 +1341,10 @@ inline constexpr char kSplitViewDragAndD
 inline constexpr char kSplitViewDragAndDropNudgeUsedCount[] =
     "browser.split_view_drag_and_drop_nudge_used_count";
 
+// A boolean pref set to true if the Avatar button should be visible on the
+// toolbar.
+inline constexpr char kShowAvatarButton[] = "helium.browser.show_avatar_button";
+
 // A boolean pref set to true if Gemini integration be enabled. This is managed
 // by enterprise policy.
 inline constexpr char kGeminiSettings[] = "browser.gemini_settings";
