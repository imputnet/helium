--- a/third_party/search_engines_data/resources/definitions/prepopulated_engines.json
+++ b/third_party/search_engines_data/resources/definitions/prepopulated_engines.json
@@ -166,30 +166,14 @@
       "id": 114
     },
 
-    "google": {
+    "break_stuff_google": {
       "name": "Google",
       "keyword": "google.com",
       "favicon_url": "https://www.google.com/images/branding/product/ico/googleg_alldp.ico",
       "base_builtin_resource_id": "SEARCH_ENGINE_GOOGLE",
-      "search_url": "{google:baseURL}search?q={searchTerms}&{google:RLZ}{google:originalQueryForSuggestion}{google:assistedQueryStats}{google:searchFieldtrialParameter}{google:language}{google:prefetchSource}{google:searchClient}{google:sourceId}{google:contextualSearchVersion}ie={inputEncoding}",
-      "suggest_url": "{google:baseSuggestURL}search?{google:searchFieldtrialParameter}client={google:suggestClient}&gs_ri={google:suggestRid}&xssi=t&q={searchTerms}&{google:inputType}{google:omniboxFocusType}{google:cursorPosition}{google:currentPageUrl}{google:pageClassification}{google:clientCacheTimeToLive}{google:searchVersion}{google:sessionToken}{google:prefetchQuery}sugkey={google:suggestAPIKeyParameter}",
-      "image_url": "{google:baseSearchByImageURL}upload",
-      "image_translate_url": "{google:baseSearchByImageURL}upload?filtertype=tr&{imageTranslateSourceLocale}{imageTranslateTargetLocale}",
-      "contextual_search_url": "{google:baseURL}_/contextualsearch?{google:contextualSearchVersion}{google:contextualSearchContextData}",
-      "image_url_post_params": "encoded_image={google:imageThumbnail},image_url={google:imageURL},sbisrc={google:imageSearchSource},original_width={google:imageOriginalWidth},original_height={google:imageOriginalHeight},processed_image_dimensions={google:processedImageDimensions}",
-      "image_translate_source_language_param_key": "sourcelang",
-      "image_translate_target_language_param_key": "targetlang",
-      "search_intent_params": ["si", "gs_ssp", "udm"],
-      "alternate_urls": [
-        "{google:baseURL}#q={searchTerms}",
-        "{google:baseURL}search#q={searchTerms}",
-        "{google:baseURL}webhp#q={searchTerms}",
-        "{google:baseURL}s#q={searchTerms}",
-        "{google:baseURL}s?q={searchTerms}"
-      ],
-      "type": "SEARCH_ENGINE_GOOGLE",
-      "preconnect_to_search_url" : "ALLOWED",
-      "prefetch_likely_navigations" : "ALLOWED",
+      "search_url": "https://www.google.com/search?q={searchTerms}",
+      "suggest_url": "https://www.google.com/complete/search?client=chrome&q={searchTerms}",
+      "type": "SEARCH_ENGINE_OTHER",
       "id": 1
     },
 
--- a/components/search_engines/search_engine_utils.cc
+++ b/components/search_engines/search_engine_utils.cc
@@ -35,7 +35,7 @@ SearchEngineType GetEngineType(const GUR
   // incoming URL's host is "[*.]google.<TLD>".
   if (google_util::IsGoogleDomainUrl(url, google_util::DISALLOW_SUBDOMAIN,
                                      google_util::ALLOW_NON_STANDARD_PORTS))
-    return TemplateURLPrepopulateData::google.type;
+    return SEARCH_ENGINE_OTHER;
 
   // Now check the rest of the prepopulate data.
   for (const auto* engine : TemplateURLPrepopulateData::kAllEngines) {
