--- a/chrome/app/settings_strings.grdp
+++ b/chrome/app/settings_strings.grdp
@@ -257,6 +257,9 @@
   <message name="IDS_SETTINGS_COLOR_SCHEME_MODE" desc="Text of the label for selecting a color scheme mode for the browser.">
     Mode
   </message>
+  <message name="IDS_SETTINGS_NEW_TAB_NEXT_TO_ACTIVE_BUTTON" desc="Label for the checkbox which enables or disables behaviour of opening new tabs next to current active tab.">
+    Open new tabs next to the active tab
+  </message>
   <message name="IDS_SETTINGS_SHOW_HOME_BUTTON" desc="Label for the checkbox which enables or disables showing the home button in the toolbar.">
     Show home button
   </message>
--- a/chrome/browser/extensions/api/settings_private/prefs_util.cc
+++ b/chrome/browser/extensions/api/settings_private/prefs_util.cc
@@ -221,6 +221,10 @@ const PrefsUtil::TypedPrefMap& PrefsUtil
   (*s_allowlist)[::prefs::kUseCustomChromeFrame] =
       settings_api::PrefType::kBoolean;
 #endif
+
+  (*s_allowlist)[::prefs::kNewTabNextToActive] =
+      settings_api::PrefType::kBoolean;
+
   (*s_allowlist)[::prefs::kShowHomeButton] = settings_api::PrefType::kBoolean;
   (*s_allowlist)[::prefs::kShowForwardButton] =
       settings_api::PrefType::kBoolean;
--- a/chrome/browser/resources/settings/appearance_page/appearance_page.html
+++ b/chrome/browser/resources/settings/appearance_page/appearance_page.html
@@ -173,6 +173,11 @@
             label="$i18n{showBookmarksBar}">
         </settings-toggle-button>
 
+        <settings-toggle-button class="hr" id="newTabNextToActive"
+            pref="{{prefs.helium.browser.new_tab_next_to_active}}"
+            label="$i18n{openNewTabNextToActive}">
+        </settings-toggle-button>
+
         <settings-toggle-button class="hr" id="showSavedTabGroups"
             pref="{{prefs.bookmark_bar.show_tab_groups}}"
             label="$i18n{showTabGroupsInBookmarksBar}">
--- a/chrome/browser/ui/browser_ui_prefs.cc
+++ b/chrome/browser/ui/browser_ui_prefs.cc
@@ -104,6 +104,8 @@ void RegisterBrowserUserPrefs(user_prefs
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF;
 #endif
 
+  registry->RegisterBooleanPref(prefs::kNewTabNextToActive, false);
+
   registry->RegisterBooleanPref(prefs::kHomePageIsNewTabPage, true,
                                 pref_registration_flags);
   registry->RegisterBooleanPref(prefs::kShowHomeButton, false,
--- a/chrome/browser/ui/tabs/tab_strip_model.cc
+++ b/chrome/browser/ui/tabs/tab_strip_model.cc
@@ -81,12 +81,14 @@
 #include "chrome/browser/web_applications/policy/web_app_policy_manager.h"
 #include "chrome/browser/web_applications/web_app_provider.h"
 #include "chrome/browser/web_applications/web_app_tab_helper.h"
+#include "chrome/common/pref_names.h"
 #include "chrome/common/webui_url_constants.h"
 #include "components/commerce/core/commerce_utils.h"
 #include "components/content_settings/core/browser/host_content_settings_map.h"
 #include "components/content_settings/core/common/content_settings.h"
 #include "components/content_settings/core/common/content_settings_types.h"
 #include "components/feature_engagement/public/feature_constants.h"
+#include "components/prefs/pref_service.h"
 #include "components/reading_list/core/reading_list_model.h"
 #include "components/tab_groups/tab_group_id.h"
 #include "components/tab_groups/tab_group_visual_data.h"
@@ -1545,7 +1547,11 @@ void TabStripModel::AddTab(std::unique_p
     // For all other types, respect what was passed to us, normalizing -1s and
     // values that are too large.
     if (index < 0 || index > count()) {
-      index = count();
+      if (count() >= 1 && profile_->GetPrefs()->GetBoolean(prefs::kNewTabNextToActive)) {
+        index = active_index() + 1;
+      } else {
+        index = count();
+      }
     }
   }
 
--- a/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
+++ b/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
@@ -510,6 +510,7 @@ void AddAppearanceStrings(content::WebUI
       {"lightMode", IDS_NTP_CUSTOMIZE_CHROME_COLOR_SCHEME_MODE_LIGHT_LABEL},
       {"darkMode", IDS_NTP_CUSTOMIZE_CHROME_COLOR_SCHEME_MODE_DARK_LABEL},
       {"systemMode", IDS_NTP_CUSTOMIZE_CHROME_COLOR_SCHEME_MODE_SYSTEM_LABEL},
+      {"openNewTabNextToActive", IDS_SETTINGS_NEW_TAB_NEXT_TO_ACTIVE_BUTTON},
       {"showHomeButton", IDS_SETTINGS_SHOW_HOME_BUTTON},
       {"showBookmarksBar", IDS_SETTINGS_SHOW_BOOKMARKS_BAR},
       {"allowSplitViewDragAndDrop",
--- a/chrome/common/pref_names.h
+++ b/chrome/common/pref_names.h
@@ -1315,6 +1315,10 @@ inline constexpr char
         "restricted_managed_guest_session_extension_cleanup_exempt_list";
 #endif  // BUILDFLAG(IS_CHROMEOS)
 
+// A boolean pref set to true if new tabs should be created to the next of current active one,
+// instead of tab strip end.
+inline constexpr char kNewTabNextToActive[] = "helium.browser.new_tab_next_to_active";
+
 // A boolean pref set to true if a Home button to open the Home pages should be
 // visible on the toolbar.
 inline constexpr char kShowHomeButton[] = "browser.show_home_button";
