--- a/chrome/app/settings_strings.grdp
+++ b/chrome/app/settings_strings.grdp
@@ -1903,6 +1903,31 @@
   <message name="IDS_SETTINGS_SECURITY_DESCRIPTION" desc="Description of the controls available on the security settings page">
     Safe Browsing (protection from dangerous sites) and other security settings
   </message>
+  <message name="IDS_SETTINGS_HELIUM_SERVICES" desc="Name of the page which controls connectivity to Helium services">
+    Helium services
+  </message>
+  <message name="IDS_SETTINGS_HELIUM_SERVICES_DESCRIPTION" desc="Description of the controls available on the Helium services settings page">
+    Manage what Helium services are allowed in your browser
+  </message>
+  <message name="IDS_SETTINGS_HELIUM_SERVICES_TOGGLE" desc="Global toggle for enabling/disabling of all Helium services">
+    Allow connecting to Helium services
+  </message>
+  <message name="IDS_SETTINGS_HELIUM_SERVICES_TOGGLE_DESCRIPTION" desc="Description of the toggle for enabling/disabling of all Helium services">
+    When enabled, Helium will be able to connect to anonymous web services to provide additional functionality. When disabled, additional features will not work.
+  </message>
+  <message name="IDS_SETTINGS_HELIUM_SERVICES_OVERRIDE" desc="Text input for overriding the Helium services server">
+    Use your own instance of Helium services
+  </message>
+  <message name="IDS_SETTINGS_HELIUM_SERVICES_OVERRIDE_DESCRIPTION" desc="Description of the text input for overriding the Helium services server">
+    You can host your own instance of Helium services and use it in your browser instead of the default one. HTTPS only.
+  </message>
+  <message name="IDS_SETTINGS_HELIUM_SERVICES_OVERRIDE_DESCRIPTION_WARNING" desc="Warning section of description for overriding the Helium services server">
+    Do not use this field unless you know exactly what you are doing. Never paste URLs from other people here, they are trying to steal your data. We are not responsible for any damages caused by using a custom server and will not be able to help you.
+  </message>
+  <message name="IDS_SETTINGS_HELIUM_SERVICES_OVERRIDE_ARIA_LABEL" desc="ARIA label of the text input for overriding the Helium services server">
+    Custom origin URL for Helium services
+  </message>
+
   <message name="IDS_SETTINGS_ADVANCED_PROTECTION_PROGRAM" desc="Name of the link which takes users
     to the Google Advanced Protection Program external webpage">
     Google Advanced Protection Program
--- a/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
+++ b/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
@@ -1953,6 +1953,18 @@ void AddPrivacyStrings(content::WebUIDat
       {"permissionsPageDescription", IDS_SETTINGS_PERMISSIONS_DESCRIPTION},
       {"securityPageTitle", IDS_SETTINGS_SECURITY},
       {"securityPageDescription", IDS_SETTINGS_SECURITY_DESCRIPTION},
+      {"heliumServicesTitle", IDS_SETTINGS_HELIUM_SERVICES},
+      {"heliumServicesDescription", IDS_SETTINGS_HELIUM_SERVICES_DESCRIPTION},
+      {"heliumServicesToggle", IDS_SETTINGS_HELIUM_SERVICES_TOGGLE},
+      {"heliumServicesToggleDescription",
+        IDS_SETTINGS_HELIUM_SERVICES_TOGGLE_DESCRIPTION},
+      {"heliumOriginOverride", IDS_SETTINGS_HELIUM_SERVICES_OVERRIDE},
+      {"heliumOriginOverrideDescription",
+        IDS_SETTINGS_HELIUM_SERVICES_OVERRIDE_DESCRIPTION},
+      {"heliumOriginOverrideDescriptionWarning",
+        IDS_SETTINGS_HELIUM_SERVICES_OVERRIDE_DESCRIPTION_WARNING},
+      {"heliumOriginOverrideLabel",
+        IDS_SETTINGS_HELIUM_SERVICES_OVERRIDE_ARIA_LABEL},
       {"advancedProtectionProgramTitle",
        IDS_SETTINGS_ADVANCED_PROTECTION_PROGRAM},
       {"advancedProtectionProgramDesc",
--- a/chrome/browser/resources/settings/privacy_page/privacy_page.html
+++ b/chrome/browser/resources/settings/privacy_page/privacy_page.html
@@ -83,6 +83,11 @@
             sub-label="$i18n{permissionsPageDescription}"
             on-click="onPermissionsPageClick_"
             role-description="$i18n{subpageArrowRoleDescription}"></cr-link-row>
+        <cr-link-row id="heliumServicesLinkRow" start-icon="cr:chrome-product"
+            class="hr" label="$i18n{heliumServicesTitle}"
+            sub-label="$i18n{heliumServicesDescription}"
+            on-click="onHeliumServicesPageClick_"
+            role-description="$i18n{subpageArrowRoleDescription}"></cr-link-row>
         <cr-toast id="deleteBrowsingDataToast" duration="5000">
           <div>[[dbdDeletionConfirmationToastLabel_]]</div>
         </cr-toast>
@@ -115,6 +120,13 @@
         </settings-subpage>
       </template>
 
+      <template is="dom-if" route-path="/privacy/services">
+        <settings-subpage id="services" page-title="$i18n{heliumServicesTitle}"
+            associated-control="[[$$('#heliumServicesLinkRow')]]">
+          <settings-helium-services-page prefs="{{prefs}}"></settings-helium-services-page>
+        </settings-subpage>
+      </template>
+
       <template is="dom-if" route-path="/security">
         <settings-subpage id="security" page-title="$i18n{securityPageTitle}"
             associated-control="[[$$('#securityLinkRow')]]"
--- a/chrome/browser/resources/settings/privacy_page/privacy_page.ts
+++ b/chrome/browser/resources/settings/privacy_page/privacy_page.ts
@@ -415,6 +415,12 @@ export class SettingsPrivacyPageElement
     Router.getInstance().navigateTo(routes.SITE_SETTINGS);
   }
 
+  private onHeliumServicesPageClick_() {
+    this.interactedWithPage_();
+
+    Router.getInstance().navigateTo(routes.HELIUM_SERVICES);
+  }
+
   private onSecurityPageClick_() {
     this.interactedWithPage_();
     this.metricsBrowserProxy_.recordAction(
--- a/chrome/browser/resources/settings/router.ts
+++ b/chrome/browser/resources/settings/router.ts
@@ -32,6 +32,7 @@ export interface SettingsRoutes {
   FONTS: Route;
   GEMINI: Route;
   GLIC_SECTION: Route;
+  HELIUM_SERVICES: Route;
   HISTORY_SEARCH: Route;
   INCOGNITO_TRACKING_PROTECTIONS: Route;
   LANGUAGES: Route;
--- a/chrome/browser/resources/settings/route.ts
+++ b/chrome/browser/resources/settings/route.ts
@@ -18,6 +18,8 @@ function addPrivacyChildRoutes(r: Partia
   r.CLEAR_BROWSER_DATA = r.PRIVACY.createChild('/clearBrowserData');
   r.CLEAR_BROWSER_DATA.isNavigableDialog = true;
 
+  r.HELIUM_SERVICES = r.PRIVACY.createChild('services');
+
   const visibility = pageVisibility || {};
 
   if (visibility.safetyHub !== false) {
--- a/chrome/browser/resources/settings/BUILD.gn
+++ b/chrome/browser/resources/settings/BUILD.gn
@@ -156,6 +156,7 @@ build_webui("build") {
     "privacy_page/security_keys_subpage.ts",
     "privacy_page/security_page_v2.ts",
     "privacy_page/security_page.ts",
+    "privacy_page/services_page.ts",
     "privacy_sandbox/privacy_sandbox_ad_measurement_subpage.ts",
     "privacy_sandbox/privacy_sandbox_fledge_subpage.ts",
     "privacy_sandbox/privacy_sandbox_interest_item.ts",
--- /dev/null
+++ b/chrome/browser/resources/settings/privacy_page/services_page.html
@@ -0,0 +1,45 @@
+<style include="cr-shared-style settings-shared">
+    .label-wrapper {
+        padding: var(--cr-section-vertical-padding) 0;
+    }
+</style>
+
+<div class="cr-col first">
+    <settings-toggle-button id="servicesToggleButton"
+        pref="{{prefs.helium.services.enabled}}"
+        label="$i18n{heliumServicesToggle}"
+        sub-label="$i18n{heliumServicesToggleDescription}">
+    </settings-toggle-button>
+    <div class="cr-col">
+        <cr-collapse id="servicesCollapse" opened="[[prefs.helium.services.enabled.value]]">
+        </cr-collapse>
+    </div>
+</div>
+
+
+<div class="cr-row">
+  <div class="flex">
+    <div class="flex label-wrapper">
+        <div class="label">$i18n{heliumOriginOverride}</div>
+        <div class="cr-secondary-text label">
+            $i18n{heliumOriginOverrideDescription}
+            <br><br>
+            <b>$i18n{heliumOriginOverrideDescriptionWarning}</b>
+        </div>
+    </div>
+    <cr-input
+        id="heliumOriginOverride"
+        placeholder="https://services.helium.imput.net"
+        value="[[prefs.helium.services.origin_override.value]]"
+        pattern="https://.*"
+        on-keydown="onOriginOverrideKeydown_"
+        on-change="onOriginOverrideChange_"
+        type="url"
+        maxlength="128"
+        aria-label="$i18n{heliumOriginOverrideLabel}"
+        auto-validate
+        error-message="Invalid origin"
+        spellcheck="false"
+    />
+  </div>
+</div>
--- /dev/null
+++ b/chrome/browser/resources/settings/privacy_page/services_page.ts
@@ -0,0 +1,67 @@
+// Copyright 2025 The Helium Authors
+// You can use, redistribute, and/or modify this source code under
+// the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+import {HelpBubbleMixin} from 'chrome://resources/cr_components/help_bubble/help_bubble_mixin.js';
+import {I18nMixin} from 'chrome://resources/cr_elements/i18n_mixin.js';
+import {PrefsMixin} from '/shared/settings/prefs/prefs_mixin.js';
+import {PolymerElement} from 'chrome://resources/polymer/v3_0/polymer/polymer_bundled.min.js';
+import {getTemplate} from './services_page.html.js';
+import type {CrInputElement} from 'chrome://resources/cr_elements/cr_input/cr_input.js';
+
+const SettingsHeliumServicesPageElementBase =
+    HelpBubbleMixin(I18nMixin(PrefsMixin(PolymerElement)));
+
+export class SettingsHeliumServicesPageElement
+    extends SettingsHeliumServicesPageElementBase
+{
+  static get is() {
+    return 'settings-helium-services-page';
+  }
+
+  static get template() {
+    return getTemplate();
+  }
+
+  static get properties() {
+    return {};
+  }
+
+  private toOrigin(thing: string) {
+    try {
+      return new URL(thing).origin;
+    } catch {
+      return null;
+    }
+  }
+
+  protected onOriginOverrideKeydown_(event: KeyboardEvent) {
+    const target = event.target as CrInputElement;
+
+    if (event.key === 'Escape' || event.key === 'Enter') {
+      target.blur();
+    }
+  }
+
+  private onOriginOverrideChange_(event: Event) {
+    const target = event.target as CrInputElement;
+    if (target.invalid) {
+      return;
+    }
+
+    const origin = this.toOrigin(target.value);
+    if (origin) {
+      target.value = origin;
+    }
+
+    this.setPrefValue('helium.services.origin_override', target.value);
+  }
+}
+
+declare global {
+    interface HTMLElementTagNameMap {
+      'settings-helium-services-page': SettingsHeliumServicesPageElement;
+    }
+}
+
+customElements.define(SettingsHeliumServicesPageElement.is, SettingsHeliumServicesPageElement);
--- a/chrome/browser/resources/settings/lazy_load.ts
+++ b/chrome/browser/resources/settings/lazy_load.ts
@@ -35,6 +35,7 @@ import './privacy_sandbox/privacy_sandbo
 import './privacy_page/security_keys_subpage.js';
 import './privacy_page/security_page_v2.js';
 import './privacy_page/security_page.js';
+import './privacy_page/services_page.js';
 import './safety_hub/safety_hub_page.js';
 import './safety_hub/safety_hub_entry_point.js';
 import './site_settings/all_sites.js';
@@ -212,6 +213,7 @@ export {ResetDialogPage, SettingsSecurit
 export {SetPinDialogPage, SettingsSecurityKeysSetPinDialogElement} from './privacy_page/security_keys_set_pin_dialog.js';
 export {SecurityKeysSubpageElement} from './privacy_page/security_keys_subpage.js';
 export {HttpsFirstModeSetting, SafeBrowsingSetting, SettingsSecurityPageElement} from './privacy_page/security_page.js';
+export {SettingsHeliumServicesPageElement} from './privacy_page/services_page.js';
 export {SecuritySettingsBundleSetting, SettingsSecurityPageV2Element} from './privacy_page/security_page_v2.js';
 export {SettingsPrivacySandboxAdMeasurementSubpageElement} from './privacy_sandbox/privacy_sandbox_ad_measurement_subpage.js';
 export {SettingsPrivacySandboxFledgeSubpageElement} from './privacy_sandbox/privacy_sandbox_fledge_subpage.js';
--- a/chrome/browser/ui/browser_ui_prefs.cc
+++ b/chrome/browser/ui/browser_ui_prefs.cc
@@ -14,6 +14,7 @@
 #include "chrome/browser/upgrade_detector/upgrade_detector.h"
 #include "chrome/common/buildflags.h"
 #include "chrome/common/pref_names.h"
+#include "components/helium_services/pref_names.h"
 #include "components/policy/core/common/policy_pref_names.h"
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/pref_registry_simple.h"
@@ -197,6 +198,11 @@ void RegisterBrowserUserPrefs(user_prefs
                                 false);
 #endif
 
+  {
+    registry->RegisterBooleanPref(prefs::kHeliumServicesEnabled, true);
+    registry->RegisterStringPref(prefs::kHeliumServicesOrigin, "");
+  }
+
   registry->RegisterBooleanPref(
       prefs::kHttpsOnlyModeEnabled, false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
--- a/chrome/browser/extensions/api/settings_private/prefs_util.cc
+++ b/chrome/browser/extensions/api/settings_private/prefs_util.cc
@@ -45,6 +45,7 @@
 #include "components/dom_distiller/core/pref_names.h"
 #include "components/drive/drive_pref_names.h"
 #include "components/embedder_support/pref_names.h"
+#include "components/helium_services/pref_names.h"
 #include "components/language/core/browser/pref_names.h"
 #include "components/live_caption/pref_names.h"
 #include "components/media_router/common/pref_names.h"
@@ -350,6 +351,12 @@ const PrefsUtil::TypedPrefMap& PrefsUtil
       settings_api::PrefType::kString;
 #endif
 
+  // Helium services page
+  (*s_allowlist)[::prefs::kHeliumServicesEnabled] =
+      settings_api::PrefType::kBoolean;
+  (*s_allowlist)[::prefs::kHeliumServicesOrigin] =
+      settings_api::PrefType::kString;
+
   // Privacy Guide
   (*s_allowlist)[::prefs::kPrivacyGuideViewed] =
       settings_api::PrefType::kBoolean;
--- /dev/null
+++ b/components/helium_services/BUILD.gn
@@ -0,0 +1,20 @@
+# Copyright 2025 The Helium Authors
+# You can use, redistribute, and/or modify this source code under
+# the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+component("helium_services") {
+  sources = [
+    "helium_services_helpers.cc",
+    "helium_services_helpers.h",
+    "pref_names.h",
+  ]
+
+  public_deps = [
+    "//base",
+    "//components/prefs",
+    "//url",
+    "//net",
+  ]
+
+  defines = [ "IS_HELIUM_IMPL" ]
+}
--- /dev/null
+++ b/components/helium_services/helium_services_helpers.cc
@@ -0,0 +1,66 @@
+// Copyright 2025 The Helium Authors
+// You can use, redistribute, and/or modify this source code under
+// the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+#include "components/helium_services/helium_services_helpers.h"
+
+#include <optional>
+
+#include "base/functional/bind.h"
+#include "components/helium_services/pref_names.h"
+#include "components/prefs/pref_service.h"
+#include "net/base/url_util.h"
+#include "url/gurl.h"
+#include "url/url_constants.h"
+
+namespace helium {
+
+std::optional<GURL> GetValidUserOverridenURL(std::string_view user_url_) {
+    if (user_url_.empty()) {
+        return std::nullopt;
+    }
+
+    GURL user_url = GURL(user_url_);
+    if (!user_url.is_valid()) {
+        return std::nullopt;
+    }
+
+    bool isSecure = user_url.SchemeIs(url::kHttpsScheme) || net::IsLocalhost(user_url);
+    if (!isSecure) {
+        return std::nullopt;
+    }
+
+    return user_url;
+}
+
+std::optional<GURL> GetValidUserOverridenURL(const PrefService& prefs) {
+    return GetValidUserOverridenURL(
+        prefs.GetString(prefs::kHeliumServicesOrigin)
+    );
+}
+
+GURL GetServicesBaseURL(const PrefService& prefs) {
+    std::optional<GURL> user_url = GetValidUserOverridenURL(prefs);
+    if (user_url) {
+        return *user_url;
+    }
+
+    return GURL(kHeliumDefaultOrigin);
+}
+
+GURL GetDummyURL() {
+    return GURL(kHeliumDummyOrigin);
+}
+
+bool ShouldAccessServices(const PrefService& prefs) {
+    return prefs.GetBoolean(prefs::kHeliumServicesEnabled);
+}
+
+void ConfigurePrefChangeRegistrarFor(std::string_view pref_name,
+    PrefChangeRegistrar& registrar, const base::RepeatingClosure& observer) {
+  registrar.Add(prefs::kHeliumServicesEnabled, observer);
+  registrar.Add(prefs::kHeliumServicesOrigin, observer);
+  registrar.Add(pref_name, observer);
+}
+
+}  // namespace helium
--- /dev/null
+++ b/components/helium_services/helium_services_helpers.h
@@ -0,0 +1,28 @@
+// Copyright 2025 The Helium Authors
+// You can use, redistribute, and/or modify this source code under
+// the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+#ifndef COMPONENTS_HELIUM_SERVICES_HELIUM_SERVICES_HELPERS_H_
+#define COMPONENTS_HELIUM_SERVICES_HELIUM_SERVICES_HELPERS_H_
+
+#include "base/functional/bind.h"
+#include "components/prefs/pref_change_registrar.h"
+#include "components/prefs/pref_service.h"
+#include "url/gurl.h"
+
+namespace helium {
+
+const char kHeliumDefaultOrigin[] =
+    "https://services.helium.imput.net";
+
+const char kHeliumDummyOrigin[] =
+    "https://helium-services-are-disabled.qjz9zk";
+
+COMPONENT_EXPORT(HELIUM) GURL GetServicesBaseURL(const PrefService& prefs);
+COMPONENT_EXPORT(HELIUM) GURL GetDummyURL();
+COMPONENT_EXPORT(HELIUM) std::optional<GURL> GetValidUserOverridenURL(std::string_view user_url_);
+COMPONENT_EXPORT(HELIUM) void ConfigurePrefChangeRegistrarFor(std::string_view pref_name,
+                            PrefChangeRegistrar& registrar, const base::RepeatingClosure& observer);
+}  // namespace helium
+
+#endif  // COMPONENTS_HELIUM_SERVICES_HELIUM_SERVICES_HELPERS_H_
--- /dev/null
+++ b/components/helium_services/pref_names.h
@@ -0,0 +1,18 @@
+// Copyright 2025 The Helium Authors
+// You can use, redistribute, and/or modify this source code under
+// the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+#ifndef COMPONENTS_HELIUM_SERVICES_PREF_NAMES_H_
+#define COMPONENTS_HELIUM_SERVICES_PREF_NAMES_H_
+
+namespace prefs {
+
+inline constexpr char kHeliumServicesEnabled[] =
+    "helium.services.enabled";
+
+inline constexpr char kHeliumServicesOrigin[] =
+    "helium.services.origin_override";
+
+}  // namespace prefs
+
+#endif  // COMPONENTS_HELIUM_SERVICES_PREF_NAMES_H_
