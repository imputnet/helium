--- a/chrome/browser/helium_flag_choices.h
+++ b/chrome/browser/helium_flag_choices.h
@@ -27,6 +27,7 @@ namespace helium {
   };
 
   constexpr const char kDisableEchCommandLine[] = "disable-ech";
+  constexpr const char kCanvasNoiseCommandLine[] = "fingerprinting-canvas-noise";
 
 }  // namespace helium
 
--- a/chrome/browser/helium_flag_entries.h
+++ b/chrome/browser/helium_flag_entries.h
@@ -16,4 +16,8 @@
      "Disables TLS Encrypted Client Hello. Not recommended unless you live in an area with heavy Internet"
      " censorship and ECH prevents websites from loading. Helium flag.",
      kOsAll, SINGLE_VALUE_TYPE(helium::kDisableEchCommandLine)},
+    {helium::kCanvasNoiseCommandLine,
+     "Canvas fingerprint deception",
+     "Enable noising pixels when the contents of a canvas are read back by a script. Bound to a browser session. Helium flag, Chromium feature.",
+     kOsAll, FEATURE_VALUE_TYPE(fingerprinting_protection_interventions::features::kCanvasNoise)},
 #endif  /* CHROME_BROWSER_HELIUM_FLAG_ENTRIES_H_ */
--- a/components/fingerprinting_protection_filter/interventions/common/interventions_features.cc
+++ b/components/fingerprinting_protection_filter/interventions/common/interventions_features.cc
@@ -12,13 +12,13 @@ namespace fingerprinting_protection_inte
 // readback values.
 BASE_FEATURE(kCanvasNoise,
              "CanvasNoise",
-             base::FeatureState::FEATURE_DISABLED_BY_DEFAULT);
+             base::FeatureState::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE_PARAM(bool,
                    kCanvasNoiseInRegularMode,
                    &kCanvasNoise,
                    "enable_in_regular_mode",
-                   false);
+                   true);
 
 bool IsCanvasInterventionsEnabledForIncognitoState(bool is_incognito) {
   if (is_incognito) {
--- a/third_party/blink/renderer/core/canvas_interventions/canvas_interventions_helper.cc
+++ b/third_party/blink/renderer/core/canvas_interventions/canvas_interventions_helper.cc
@@ -132,17 +132,6 @@ bool CanvasInterventionsHelper::MaybeNoi
                              static_cast<int>(high_entropy_canvas_op_types),
                              canvas_op_exclusive_max);
 
-  AuditsIssue::ReportUserReidentificationCanvasNoisedIssue(
-      CaptureSourceLocation(execution_context), execution_context);
-
-  execution_context->AddConsoleMessage(MakeGarbageCollected<ConsoleMessage>(
-      mojom::blink::ConsoleMessageSource::kIntervention,
-      mojom::blink::ConsoleMessageLevel::kInfo,
-      "Noise was added to a canvas readback. If this has caused breakage, "
-      "please file a bug at https://issues.chromium.org/issues/"
-      "new?component=1456351&title=Canvas%20noise%20breakage. This "
-      "feature can be disabled through chrome://flags/#enable-canvas-noise"));
-
   base::TimeDelta elapsed_time = base::TimeTicks::Now() - start_time;
 
   UMA_HISTOGRAM_CUSTOM_MICROSECONDS_TIMES(kNoiseDurationMetricName,
@@ -150,9 +139,6 @@ bool CanvasInterventionsHelper::MaybeNoi
                                           base::Milliseconds(50), 50);
   UMA_HISTOGRAM_COUNTS_1M(kCanvasSizeMetricName,
                           pixmap_to_noise.width() * pixmap_to_noise.height());
-  UseCounter::Count(execution_context, WebFeature::kCanvasReadbackNoise);
-  auto* helper = CanvasInterventionsHelper::From(execution_context);
-  helper->IncrementNoisedCanvasReadbacks();
 
   return true;
 }
